
CC1101_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002478  08002478  00012478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002520  08002520  00012520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002524  08002524  00012524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08002528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000208  20000074  0800259c  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000027c  0800259c  0002027c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f2a1  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000223a  00000000  00000000  0002f33d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009002  00000000  00000000  00031577  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b28  00000000  00000000  0003a580  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000fd0  00000000  00000000  0003b0a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005dad  00000000  00000000  0003c078  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000040f2  00000000  00000000  00041e25  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00045f17  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000028f8  00000000  00000000  00045f94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002460 	.word	0x08002460

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08002460 	.word	0x08002460

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b570      	push	{r4, r5, r6, lr}
 800024a:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800024c:	20fa      	movs	r0, #250	; 0xfa
 800024e:	4b0d      	ldr	r3, [pc, #52]	; (8000284 <HAL_InitTick+0x3c>)
 8000250:	0080      	lsls	r0, r0, #2
 8000252:	7819      	ldrb	r1, [r3, #0]
 8000254:	f7ff ff6c 	bl	8000130 <__udivsi3>
 8000258:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <HAL_InitTick+0x40>)
 800025a:	0001      	movs	r1, r0
 800025c:	6818      	ldr	r0, [r3, #0]
 800025e:	f7ff ff67 	bl	8000130 <__udivsi3>
 8000262:	f000 f885 	bl	8000370 <HAL_SYSTICK_Config>
 8000266:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000268:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800026a:	2c00      	cmp	r4, #0
 800026c:	d109      	bne.n	8000282 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800026e:	2d03      	cmp	r5, #3
 8000270:	d807      	bhi.n	8000282 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000272:	3802      	subs	r0, #2
 8000274:	0022      	movs	r2, r4
 8000276:	0029      	movs	r1, r5
 8000278:	f000 f83e 	bl	80002f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800027c:	0020      	movs	r0, r4
 800027e:	4b03      	ldr	r3, [pc, #12]	; (800028c <HAL_InitTick+0x44>)
 8000280:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	20000000 	.word	0x20000000
 8000288:	2000000c 	.word	0x2000000c
 800028c:	20000004 	.word	0x20000004

08000290 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000290:	2310      	movs	r3, #16
 8000292:	4a06      	ldr	r2, [pc, #24]	; (80002ac <HAL_Init+0x1c>)
{
 8000294:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000296:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000298:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800029a:	430b      	orrs	r3, r1
 800029c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800029e:	f7ff ffd3 	bl	8000248 <HAL_InitTick>
  HAL_MspInit();
 80002a2:	f001 facd 	bl	8001840 <HAL_MspInit>
}
 80002a6:	2000      	movs	r0, #0
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	40022000 	.word	0x40022000

080002b0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002b0:	4a03      	ldr	r2, [pc, #12]	; (80002c0 <HAL_IncTick+0x10>)
 80002b2:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <HAL_IncTick+0x14>)
 80002b4:	6811      	ldr	r1, [r2, #0]
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	185b      	adds	r3, r3, r1
 80002ba:	6013      	str	r3, [r2, #0]
}
 80002bc:	4770      	bx	lr
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	200000a4 	.word	0x200000a4
 80002c4:	20000000 	.word	0x20000000

080002c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002c8:	4b01      	ldr	r3, [pc, #4]	; (80002d0 <HAL_GetTick+0x8>)
 80002ca:	6818      	ldr	r0, [r3, #0]
}
 80002cc:	4770      	bx	lr
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	200000a4 	.word	0x200000a4

080002d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002d4:	b570      	push	{r4, r5, r6, lr}
 80002d6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80002d8:	f7ff fff6 	bl	80002c8 <HAL_GetTick>
 80002dc:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002de:	1c63      	adds	r3, r4, #1
 80002e0:	d002      	beq.n	80002e8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80002e2:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <HAL_Delay+0x20>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002e8:	f7ff ffee 	bl	80002c8 <HAL_GetTick>
 80002ec:	1b40      	subs	r0, r0, r5
 80002ee:	4284      	cmp	r4, r0
 80002f0:	d8fa      	bhi.n	80002e8 <HAL_Delay+0x14>
  {
  }
}
 80002f2:	bd70      	pop	{r4, r5, r6, pc}
 80002f4:	20000000 	.word	0x20000000

080002f8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002f8:	b570      	push	{r4, r5, r6, lr}
 80002fa:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80002fc:	2800      	cmp	r0, #0
 80002fe:	db12      	blt.n	8000326 <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	0883      	lsrs	r3, r0, #2
 8000302:	4a13      	ldr	r2, [pc, #76]	; (8000350 <HAL_NVIC_SetPriority+0x58>)
 8000304:	2403      	movs	r4, #3
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	189b      	adds	r3, r3, r2
 800030a:	22ff      	movs	r2, #255	; 0xff
 800030c:	4020      	ands	r0, r4
 800030e:	40a0      	lsls	r0, r4
 8000310:	0014      	movs	r4, r2
 8000312:	25c0      	movs	r5, #192	; 0xc0
 8000314:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000316:	4011      	ands	r1, r2
 8000318:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800031a:	00ad      	lsls	r5, r5, #2
 800031c:	595e      	ldr	r6, [r3, r5]
 800031e:	43a6      	bics	r6, r4
 8000320:	4331      	orrs	r1, r6
 8000322:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000324:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000326:	2403      	movs	r4, #3
 8000328:	230f      	movs	r3, #15
 800032a:	b2c0      	uxtb	r0, r0
 800032c:	4003      	ands	r3, r0
 800032e:	4020      	ands	r0, r4
 8000330:	40a0      	lsls	r0, r4
 8000332:	34fc      	adds	r4, #252	; 0xfc
 8000334:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000336:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000338:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800033a:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800033c:	3b08      	subs	r3, #8
 800033e:	4a05      	ldr	r2, [pc, #20]	; (8000354 <HAL_NVIC_SetPriority+0x5c>)
 8000340:	089b      	lsrs	r3, r3, #2
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	189b      	adds	r3, r3, r2
 8000346:	69da      	ldr	r2, [r3, #28]
 8000348:	43aa      	bics	r2, r5
 800034a:	4311      	orrs	r1, r2
 800034c:	61d9      	str	r1, [r3, #28]
 800034e:	e7e9      	b.n	8000324 <HAL_NVIC_SetPriority+0x2c>
 8000350:	e000e100 	.word	0xe000e100
 8000354:	e000ed00 	.word	0xe000ed00

08000358 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000358:	2800      	cmp	r0, #0
 800035a:	db05      	blt.n	8000368 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800035c:	231f      	movs	r3, #31
 800035e:	4018      	ands	r0, r3
 8000360:	3b1e      	subs	r3, #30
 8000362:	4083      	lsls	r3, r0
 8000364:	4a01      	ldr	r2, [pc, #4]	; (800036c <HAL_NVIC_EnableIRQ+0x14>)
 8000366:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000368:	4770      	bx	lr
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	e000e100 	.word	0xe000e100

08000370 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000370:	4a09      	ldr	r2, [pc, #36]	; (8000398 <HAL_SYSTICK_Config+0x28>)
 8000372:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000374:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000376:	4293      	cmp	r3, r2
 8000378:	d80d      	bhi.n	8000396 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800037a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800037c:	4a07      	ldr	r2, [pc, #28]	; (800039c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800037e:	4808      	ldr	r0, [pc, #32]	; (80003a0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000380:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000382:	6a03      	ldr	r3, [r0, #32]
 8000384:	0609      	lsls	r1, r1, #24
 8000386:	021b      	lsls	r3, r3, #8
 8000388:	0a1b      	lsrs	r3, r3, #8
 800038a:	430b      	orrs	r3, r1
 800038c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800038e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000390:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000392:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000394:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000396:	4770      	bx	lr
 8000398:	00ffffff 	.word	0x00ffffff
 800039c:	e000e010 	.word	0xe000e010
 80003a0:	e000ed00 	.word	0xe000ed00

080003a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80003a4:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80003a6:	4a56      	ldr	r2, [pc, #344]	; (8000500 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80003a8:	680b      	ldr	r3, [r1, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80003aa:	1882      	adds	r2, r0, r2
 80003ac:	1e54      	subs	r4, r2, #1
 80003ae:	41a2      	sbcs	r2, r4
{ 
 80003b0:	b089      	sub	sp, #36	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80003b2:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00u;
 80003b4:	2300      	movs	r3, #0
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80003b6:	3204      	adds	r2, #4
 80003b8:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80003ba:	9a03      	ldr	r2, [sp, #12]
 80003bc:	40da      	lsrs	r2, r3
 80003be:	d101      	bne.n	80003c4 <HAL_GPIO_Init+0x20>
      }
    }

    position++;
  } 
}
 80003c0:	b009      	add	sp, #36	; 0x24
 80003c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80003c4:	2201      	movs	r2, #1
 80003c6:	409a      	lsls	r2, r3
 80003c8:	4694      	mov	ip, r2
 80003ca:	4664      	mov	r4, ip
 80003cc:	9a03      	ldr	r2, [sp, #12]
 80003ce:	4022      	ands	r2, r4
 80003d0:	9202      	str	r2, [sp, #8]
    if (iocurrent != 0x00u)
 80003d2:	d100      	bne.n	80003d6 <HAL_GPIO_Init+0x32>
 80003d4:	e092      	b.n	80004fc <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003d6:	684a      	ldr	r2, [r1, #4]
 80003d8:	9201      	str	r2, [sp, #4]
 80003da:	2210      	movs	r2, #16
 80003dc:	9e01      	ldr	r6, [sp, #4]
 80003de:	4396      	bics	r6, r2
 80003e0:	2e02      	cmp	r6, #2
 80003e2:	d10d      	bne.n	8000400 <HAL_GPIO_Init+0x5c>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80003e4:	2407      	movs	r4, #7
 80003e6:	270f      	movs	r7, #15
 80003e8:	401c      	ands	r4, r3
 80003ea:	00a4      	lsls	r4, r4, #2
 80003ec:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3u];
 80003ee:	08da      	lsrs	r2, r3, #3
 80003f0:	0092      	lsls	r2, r2, #2
 80003f2:	1882      	adds	r2, r0, r2
 80003f4:	6a15      	ldr	r5, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80003f6:	43bd      	bics	r5, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80003f8:	690f      	ldr	r7, [r1, #16]
 80003fa:	40a7      	lsls	r7, r4
 80003fc:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3u] = temp;
 80003fe:	6215      	str	r5, [r2, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000400:	2203      	movs	r2, #3
 8000402:	0014      	movs	r4, r2
 8000404:	005d      	lsls	r5, r3, #1
 8000406:	40ac      	lsls	r4, r5
 8000408:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 800040a:	6807      	ldr	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800040c:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800040e:	4027      	ands	r7, r4
 8000410:	9704      	str	r7, [sp, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000412:	9f01      	ldr	r7, [sp, #4]
 8000414:	403a      	ands	r2, r7
 8000416:	40aa      	lsls	r2, r5
 8000418:	9f04      	ldr	r7, [sp, #16]
 800041a:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 800041c:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800041e:	2e01      	cmp	r6, #1
 8000420:	d80e      	bhi.n	8000440 <HAL_GPIO_Init+0x9c>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000422:	68ca      	ldr	r2, [r1, #12]
        temp = GPIOx->OSPEEDR;
 8000424:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000426:	40aa      	lsls	r2, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000428:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800042a:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 800042c:	6082      	str	r2, [r0, #8]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800042e:	4662      	mov	r2, ip
        temp = GPIOx->OTYPER;
 8000430:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000432:	4396      	bics	r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000434:	9a01      	ldr	r2, [sp, #4]
 8000436:	06d2      	lsls	r2, r2, #27
 8000438:	0fd2      	lsrs	r2, r2, #31
 800043a:	409a      	lsls	r2, r3
 800043c:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800043e:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000440:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000442:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000444:	688a      	ldr	r2, [r1, #8]
 8000446:	40aa      	lsls	r2, r5
 8000448:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800044a:	9a01      	ldr	r2, [sp, #4]
      GPIOx->PUPDR = temp;
 800044c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800044e:	00d2      	lsls	r2, r2, #3
 8000450:	d554      	bpl.n	80004fc <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000452:	2601      	movs	r6, #1
 8000454:	4a2b      	ldr	r2, [pc, #172]	; (8000504 <HAL_GPIO_Init+0x160>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000456:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000458:	6994      	ldr	r4, [r2, #24]
 800045a:	4334      	orrs	r4, r6
 800045c:	6194      	str	r4, [r2, #24]
 800045e:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000460:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000462:	4032      	ands	r2, r6
 8000464:	9207      	str	r2, [sp, #28]
 8000466:	9a07      	ldr	r2, [sp, #28]
 8000468:	4a27      	ldr	r2, [pc, #156]	; (8000508 <HAL_GPIO_Init+0x164>)
 800046a:	00a4      	lsls	r4, r4, #2
 800046c:	18a4      	adds	r4, r4, r2
        temp = SYSCFG->EXTICR[position >> 2u];
 800046e:	68a2      	ldr	r2, [r4, #8]
 8000470:	4694      	mov	ip, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000472:	2203      	movs	r2, #3
 8000474:	4015      	ands	r5, r2
 8000476:	00ad      	lsls	r5, r5, #2
 8000478:	320c      	adds	r2, #12
 800047a:	40aa      	lsls	r2, r5
 800047c:	4667      	mov	r7, ip
 800047e:	4397      	bics	r7, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000480:	2290      	movs	r2, #144	; 0x90
 8000482:	05d2      	lsls	r2, r2, #23
 8000484:	4694      	mov	ip, r2
 8000486:	2200      	movs	r2, #0
 8000488:	4560      	cmp	r0, ip
 800048a:	d00d      	beq.n	80004a8 <HAL_GPIO_Init+0x104>
 800048c:	4a1f      	ldr	r2, [pc, #124]	; (800050c <HAL_GPIO_Init+0x168>)
 800048e:	4694      	mov	ip, r2
 8000490:	0032      	movs	r2, r6
 8000492:	4560      	cmp	r0, ip
 8000494:	d008      	beq.n	80004a8 <HAL_GPIO_Init+0x104>
 8000496:	4e1e      	ldr	r6, [pc, #120]	; (8000510 <HAL_GPIO_Init+0x16c>)
 8000498:	1892      	adds	r2, r2, r2
 800049a:	42b0      	cmp	r0, r6
 800049c:	d004      	beq.n	80004a8 <HAL_GPIO_Init+0x104>
 800049e:	4e1d      	ldr	r6, [pc, #116]	; (8000514 <HAL_GPIO_Init+0x170>)
 80004a0:	3201      	adds	r2, #1
 80004a2:	42b0      	cmp	r0, r6
 80004a4:	d000      	beq.n	80004a8 <HAL_GPIO_Init+0x104>
 80004a6:	9a05      	ldr	r2, [sp, #20]
 80004a8:	40aa      	lsls	r2, r5
 80004aa:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80004ac:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 80004ae:	4a1a      	ldr	r2, [pc, #104]	; (8000518 <HAL_GPIO_Init+0x174>)
        temp &= ~(iocurrent);
 80004b0:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 80004b2:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 80004b4:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004b6:	9f01      	ldr	r7, [sp, #4]
        temp &= ~(iocurrent);
 80004b8:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80004ba:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004bc:	03ff      	lsls	r7, r7, #15
 80004be:	d401      	bmi.n	80004c4 <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 80004c0:	0035      	movs	r5, r6
 80004c2:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 80004c4:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80004c6:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80004c8:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004ca:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 80004cc:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004ce:	03bf      	lsls	r7, r7, #14
 80004d0:	d401      	bmi.n	80004d6 <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 80004d2:	0035      	movs	r5, r6
 80004d4:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 80004d6:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80004d8:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80004da:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004dc:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 80004de:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004e0:	02ff      	lsls	r7, r7, #11
 80004e2:	d401      	bmi.n	80004e8 <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 80004e4:	0035      	movs	r5, r6
 80004e6:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 80004e8:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80004ea:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80004ec:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004ee:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 80004f0:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004f2:	02bf      	lsls	r7, r7, #10
 80004f4:	d401      	bmi.n	80004fa <HAL_GPIO_Init+0x156>
        temp &= ~(iocurrent);
 80004f6:	4025      	ands	r5, r4
 80004f8:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80004fa:	60d6      	str	r6, [r2, #12]
    position++;
 80004fc:	3301      	adds	r3, #1
 80004fe:	e75c      	b.n	80003ba <HAL_GPIO_Init+0x16>
 8000500:	b7fff000 	.word	0xb7fff000
 8000504:	40021000 	.word	0x40021000
 8000508:	40010000 	.word	0x40010000
 800050c:	48000400 	.word	0x48000400
 8000510:	48000800 	.word	0x48000800
 8000514:	48000c00 	.word	0x48000c00
 8000518:	40010400 	.word	0x40010400

0800051c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800051c:	2a00      	cmp	r2, #0
 800051e:	d001      	beq.n	8000524 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000520:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000522:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000524:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000526:	e7fc      	b.n	8000522 <HAL_GPIO_WritePin+0x6>

08000528 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800052a:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800052c:	695a      	ldr	r2, [r3, #20]
 800052e:	4210      	tst	r0, r2
 8000530:	d002      	beq.n	8000538 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000532:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000534:	f000 ffce 	bl	80014d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000538:	bd10      	pop	{r4, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	40010400 	.word	0x40010400

08000540 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000542:	0004      	movs	r4, r0
 8000544:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000546:	2800      	cmp	r0, #0
 8000548:	d102      	bne.n	8000550 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800054a:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 800054c:	b005      	add	sp, #20
 800054e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000550:	6803      	ldr	r3, [r0, #0]
 8000552:	07db      	lsls	r3, r3, #31
 8000554:	d433      	bmi.n	80005be <HAL_RCC_OscConfig+0x7e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000556:	6823      	ldr	r3, [r4, #0]
 8000558:	079b      	lsls	r3, r3, #30
 800055a:	d500      	bpl.n	800055e <HAL_RCC_OscConfig+0x1e>
 800055c:	e087      	b.n	800066e <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800055e:	6823      	ldr	r3, [r4, #0]
 8000560:	071b      	lsls	r3, r3, #28
 8000562:	d500      	bpl.n	8000566 <HAL_RCC_OscConfig+0x26>
 8000564:	e0c8      	b.n	80006f8 <HAL_RCC_OscConfig+0x1b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000566:	6823      	ldr	r3, [r4, #0]
 8000568:	075b      	lsls	r3, r3, #29
 800056a:	d500      	bpl.n	800056e <HAL_RCC_OscConfig+0x2e>
 800056c:	e0eb      	b.n	8000746 <HAL_RCC_OscConfig+0x206>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800056e:	6823      	ldr	r3, [r4, #0]
 8000570:	06db      	lsls	r3, r3, #27
 8000572:	d51a      	bpl.n	80005aa <HAL_RCC_OscConfig+0x6a>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000574:	6962      	ldr	r2, [r4, #20]
 8000576:	4dbc      	ldr	r5, [pc, #752]	; (8000868 <HAL_RCC_OscConfig+0x328>)
 8000578:	2304      	movs	r3, #4
 800057a:	2a01      	cmp	r2, #1
 800057c:	d000      	beq.n	8000580 <HAL_RCC_OscConfig+0x40>
 800057e:	e157      	b.n	8000830 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000580:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000582:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000584:	430b      	orrs	r3, r1
 8000586:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000588:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800058a:	431a      	orrs	r2, r3
 800058c:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800058e:	f7ff fe9b 	bl	80002c8 <HAL_GetTick>
 8000592:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000594:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000596:	4233      	tst	r3, r6
 8000598:	d100      	bne.n	800059c <HAL_RCC_OscConfig+0x5c>
 800059a:	e142      	b.n	8000822 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800059c:	21f8      	movs	r1, #248	; 0xf8
 800059e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80005a0:	69a3      	ldr	r3, [r4, #24]
 80005a2:	438a      	bics	r2, r1
 80005a4:	00db      	lsls	r3, r3, #3
 80005a6:	4313      	orrs	r3, r2
 80005a8:	636b      	str	r3, [r5, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80005aa:	6823      	ldr	r3, [r4, #0]
 80005ac:	069b      	lsls	r3, r3, #26
 80005ae:	d500      	bpl.n	80005b2 <HAL_RCC_OscConfig+0x72>
 80005b0:	e166      	b.n	8000880 <HAL_RCC_OscConfig+0x340>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80005b4:	2a00      	cmp	r2, #0
 80005b6:	d000      	beq.n	80005ba <HAL_RCC_OscConfig+0x7a>
 80005b8:	e1a3      	b.n	8000902 <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 80005ba:	2000      	movs	r0, #0
 80005bc:	e7c6      	b.n	800054c <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005be:	210c      	movs	r1, #12
 80005c0:	4da9      	ldr	r5, [pc, #676]	; (8000868 <HAL_RCC_OscConfig+0x328>)
 80005c2:	686a      	ldr	r2, [r5, #4]
 80005c4:	400a      	ands	r2, r1
 80005c6:	2a04      	cmp	r2, #4
 80005c8:	d00b      	beq.n	80005e2 <HAL_RCC_OscConfig+0xa2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005ca:	686b      	ldr	r3, [r5, #4]
 80005cc:	400b      	ands	r3, r1
 80005ce:	2b08      	cmp	r3, #8
 80005d0:	d10e      	bne.n	80005f0 <HAL_RCC_OscConfig+0xb0>
 80005d2:	22c0      	movs	r2, #192	; 0xc0
 80005d4:	686b      	ldr	r3, [r5, #4]
 80005d6:	0252      	lsls	r2, r2, #9
 80005d8:	4013      	ands	r3, r2
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	0252      	lsls	r2, r2, #9
 80005de:	4293      	cmp	r3, r2
 80005e0:	d106      	bne.n	80005f0 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005e2:	682b      	ldr	r3, [r5, #0]
 80005e4:	039b      	lsls	r3, r3, #14
 80005e6:	d5b6      	bpl.n	8000556 <HAL_RCC_OscConfig+0x16>
 80005e8:	6863      	ldr	r3, [r4, #4]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d1b3      	bne.n	8000556 <HAL_RCC_OscConfig+0x16>
 80005ee:	e7ac      	b.n	800054a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005f0:	6863      	ldr	r3, [r4, #4]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d113      	bne.n	800061e <HAL_RCC_OscConfig+0xde>
 80005f6:	2380      	movs	r3, #128	; 0x80
 80005f8:	682a      	ldr	r2, [r5, #0]
 80005fa:	025b      	lsls	r3, r3, #9
 80005fc:	4313      	orrs	r3, r2
 80005fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000600:	f7ff fe62 	bl	80002c8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000604:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000606:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000608:	02b6      	lsls	r6, r6, #10
 800060a:	682b      	ldr	r3, [r5, #0]
 800060c:	4233      	tst	r3, r6
 800060e:	d1a2      	bne.n	8000556 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000610:	f7ff fe5a 	bl	80002c8 <HAL_GetTick>
 8000614:	1bc0      	subs	r0, r0, r7
 8000616:	2864      	cmp	r0, #100	; 0x64
 8000618:	d9f7      	bls.n	800060a <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 800061a:	2003      	movs	r0, #3
 800061c:	e796      	b.n	800054c <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800061e:	2b00      	cmp	r3, #0
 8000620:	d115      	bne.n	800064e <HAL_RCC_OscConfig+0x10e>
 8000622:	682b      	ldr	r3, [r5, #0]
 8000624:	4a91      	ldr	r2, [pc, #580]	; (800086c <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000626:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000628:	4013      	ands	r3, r2
 800062a:	602b      	str	r3, [r5, #0]
 800062c:	682b      	ldr	r3, [r5, #0]
 800062e:	4a90      	ldr	r2, [pc, #576]	; (8000870 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000630:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000632:	4013      	ands	r3, r2
 8000634:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000636:	f7ff fe47 	bl	80002c8 <HAL_GetTick>
 800063a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800063c:	682b      	ldr	r3, [r5, #0]
 800063e:	4233      	tst	r3, r6
 8000640:	d089      	beq.n	8000556 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000642:	f7ff fe41 	bl	80002c8 <HAL_GetTick>
 8000646:	1bc0      	subs	r0, r0, r7
 8000648:	2864      	cmp	r0, #100	; 0x64
 800064a:	d9f7      	bls.n	800063c <HAL_RCC_OscConfig+0xfc>
 800064c:	e7e5      	b.n	800061a <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800064e:	2b05      	cmp	r3, #5
 8000650:	d105      	bne.n	800065e <HAL_RCC_OscConfig+0x11e>
 8000652:	2380      	movs	r3, #128	; 0x80
 8000654:	682a      	ldr	r2, [r5, #0]
 8000656:	02db      	lsls	r3, r3, #11
 8000658:	4313      	orrs	r3, r2
 800065a:	602b      	str	r3, [r5, #0]
 800065c:	e7cb      	b.n	80005f6 <HAL_RCC_OscConfig+0xb6>
 800065e:	682b      	ldr	r3, [r5, #0]
 8000660:	4a82      	ldr	r2, [pc, #520]	; (800086c <HAL_RCC_OscConfig+0x32c>)
 8000662:	4013      	ands	r3, r2
 8000664:	602b      	str	r3, [r5, #0]
 8000666:	682b      	ldr	r3, [r5, #0]
 8000668:	4a81      	ldr	r2, [pc, #516]	; (8000870 <HAL_RCC_OscConfig+0x330>)
 800066a:	4013      	ands	r3, r2
 800066c:	e7c7      	b.n	80005fe <HAL_RCC_OscConfig+0xbe>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800066e:	220c      	movs	r2, #12
 8000670:	4d7d      	ldr	r5, [pc, #500]	; (8000868 <HAL_RCC_OscConfig+0x328>)
 8000672:	686b      	ldr	r3, [r5, #4]
 8000674:	4213      	tst	r3, r2
 8000676:	d00b      	beq.n	8000690 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000678:	686b      	ldr	r3, [r5, #4]
 800067a:	4013      	ands	r3, r2
 800067c:	2b08      	cmp	r3, #8
 800067e:	d116      	bne.n	80006ae <HAL_RCC_OscConfig+0x16e>
 8000680:	22c0      	movs	r2, #192	; 0xc0
 8000682:	686b      	ldr	r3, [r5, #4]
 8000684:	0252      	lsls	r2, r2, #9
 8000686:	4013      	ands	r3, r2
 8000688:	2280      	movs	r2, #128	; 0x80
 800068a:	0212      	lsls	r2, r2, #8
 800068c:	4293      	cmp	r3, r2
 800068e:	d10e      	bne.n	80006ae <HAL_RCC_OscConfig+0x16e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000690:	682b      	ldr	r3, [r5, #0]
 8000692:	079b      	lsls	r3, r3, #30
 8000694:	d503      	bpl.n	800069e <HAL_RCC_OscConfig+0x15e>
 8000696:	68e3      	ldr	r3, [r4, #12]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d000      	beq.n	800069e <HAL_RCC_OscConfig+0x15e>
 800069c:	e755      	b.n	800054a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800069e:	21f8      	movs	r1, #248	; 0xf8
 80006a0:	682a      	ldr	r2, [r5, #0]
 80006a2:	6923      	ldr	r3, [r4, #16]
 80006a4:	438a      	bics	r2, r1
 80006a6:	00db      	lsls	r3, r3, #3
 80006a8:	4313      	orrs	r3, r2
 80006aa:	602b      	str	r3, [r5, #0]
 80006ac:	e757      	b.n	800055e <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006ae:	68e2      	ldr	r2, [r4, #12]
 80006b0:	2301      	movs	r3, #1
 80006b2:	2a00      	cmp	r2, #0
 80006b4:	d00f      	beq.n	80006d6 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_ENABLE();
 80006b6:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006b8:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 80006ba:	4313      	orrs	r3, r2
 80006bc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80006be:	f7ff fe03 	bl	80002c8 <HAL_GetTick>
 80006c2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006c4:	682b      	ldr	r3, [r5, #0]
 80006c6:	4233      	tst	r3, r6
 80006c8:	d1e9      	bne.n	800069e <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006ca:	f7ff fdfd 	bl	80002c8 <HAL_GetTick>
 80006ce:	1bc0      	subs	r0, r0, r7
 80006d0:	2802      	cmp	r0, #2
 80006d2:	d9f7      	bls.n	80006c4 <HAL_RCC_OscConfig+0x184>
 80006d4:	e7a1      	b.n	800061a <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_DISABLE();
 80006d6:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006d8:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 80006da:	439a      	bics	r2, r3
 80006dc:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 80006de:	f7ff fdf3 	bl	80002c8 <HAL_GetTick>
 80006e2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006e4:	682b      	ldr	r3, [r5, #0]
 80006e6:	4233      	tst	r3, r6
 80006e8:	d100      	bne.n	80006ec <HAL_RCC_OscConfig+0x1ac>
 80006ea:	e738      	b.n	800055e <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006ec:	f7ff fdec 	bl	80002c8 <HAL_GetTick>
 80006f0:	1bc0      	subs	r0, r0, r7
 80006f2:	2802      	cmp	r0, #2
 80006f4:	d9f6      	bls.n	80006e4 <HAL_RCC_OscConfig+0x1a4>
 80006f6:	e790      	b.n	800061a <HAL_RCC_OscConfig+0xda>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006f8:	69e2      	ldr	r2, [r4, #28]
 80006fa:	2301      	movs	r3, #1
 80006fc:	4d5a      	ldr	r5, [pc, #360]	; (8000868 <HAL_RCC_OscConfig+0x328>)
 80006fe:	2a00      	cmp	r2, #0
 8000700:	d010      	beq.n	8000724 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 8000702:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000704:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000706:	4313      	orrs	r3, r2
 8000708:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 800070a:	f7ff fddd 	bl	80002c8 <HAL_GetTick>
 800070e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000710:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000712:	4233      	tst	r3, r6
 8000714:	d000      	beq.n	8000718 <HAL_RCC_OscConfig+0x1d8>
 8000716:	e726      	b.n	8000566 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000718:	f7ff fdd6 	bl	80002c8 <HAL_GetTick>
 800071c:	1bc0      	subs	r0, r0, r7
 800071e:	2802      	cmp	r0, #2
 8000720:	d9f6      	bls.n	8000710 <HAL_RCC_OscConfig+0x1d0>
 8000722:	e77a      	b.n	800061a <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_LSI_DISABLE();
 8000724:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000726:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000728:	439a      	bics	r2, r3
 800072a:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 800072c:	f7ff fdcc 	bl	80002c8 <HAL_GetTick>
 8000730:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000732:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000734:	4233      	tst	r3, r6
 8000736:	d100      	bne.n	800073a <HAL_RCC_OscConfig+0x1fa>
 8000738:	e715      	b.n	8000566 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800073a:	f7ff fdc5 	bl	80002c8 <HAL_GetTick>
 800073e:	1bc0      	subs	r0, r0, r7
 8000740:	2802      	cmp	r0, #2
 8000742:	d9f6      	bls.n	8000732 <HAL_RCC_OscConfig+0x1f2>
 8000744:	e769      	b.n	800061a <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000746:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000748:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800074a:	4d47      	ldr	r5, [pc, #284]	; (8000868 <HAL_RCC_OscConfig+0x328>)
 800074c:	0552      	lsls	r2, r2, #21
 800074e:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000750:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000752:	4213      	tst	r3, r2
 8000754:	d108      	bne.n	8000768 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	69eb      	ldr	r3, [r5, #28]
 8000758:	4313      	orrs	r3, r2
 800075a:	61eb      	str	r3, [r5, #28]
 800075c:	69eb      	ldr	r3, [r5, #28]
 800075e:	4013      	ands	r3, r2
 8000760:	9303      	str	r3, [sp, #12]
 8000762:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000764:	2301      	movs	r3, #1
 8000766:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000768:	2780      	movs	r7, #128	; 0x80
 800076a:	4e42      	ldr	r6, [pc, #264]	; (8000874 <HAL_RCC_OscConfig+0x334>)
 800076c:	007f      	lsls	r7, r7, #1
 800076e:	6833      	ldr	r3, [r6, #0]
 8000770:	423b      	tst	r3, r7
 8000772:	d006      	beq.n	8000782 <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000774:	68a3      	ldr	r3, [r4, #8]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d113      	bne.n	80007a2 <HAL_RCC_OscConfig+0x262>
 800077a:	6a2a      	ldr	r2, [r5, #32]
 800077c:	4313      	orrs	r3, r2
 800077e:	622b      	str	r3, [r5, #32]
 8000780:	e030      	b.n	80007e4 <HAL_RCC_OscConfig+0x2a4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000782:	6833      	ldr	r3, [r6, #0]
 8000784:	433b      	orrs	r3, r7
 8000786:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000788:	f7ff fd9e 	bl	80002c8 <HAL_GetTick>
 800078c:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800078e:	6833      	ldr	r3, [r6, #0]
 8000790:	423b      	tst	r3, r7
 8000792:	d1ef      	bne.n	8000774 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000794:	f7ff fd98 	bl	80002c8 <HAL_GetTick>
 8000798:	9b01      	ldr	r3, [sp, #4]
 800079a:	1ac0      	subs	r0, r0, r3
 800079c:	2864      	cmp	r0, #100	; 0x64
 800079e:	d9f6      	bls.n	800078e <HAL_RCC_OscConfig+0x24e>
 80007a0:	e73b      	b.n	800061a <HAL_RCC_OscConfig+0xda>
 80007a2:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d114      	bne.n	80007d2 <HAL_RCC_OscConfig+0x292>
 80007a8:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007aa:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007ac:	4393      	bics	r3, r2
 80007ae:	622b      	str	r3, [r5, #32]
 80007b0:	6a2b      	ldr	r3, [r5, #32]
 80007b2:	3203      	adds	r2, #3
 80007b4:	4393      	bics	r3, r2
 80007b6:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80007b8:	f7ff fd86 	bl	80002c8 <HAL_GetTick>
 80007bc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007be:	6a2b      	ldr	r3, [r5, #32]
 80007c0:	423b      	tst	r3, r7
 80007c2:	d025      	beq.n	8000810 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007c4:	f7ff fd80 	bl	80002c8 <HAL_GetTick>
 80007c8:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <HAL_RCC_OscConfig+0x338>)
 80007ca:	1b80      	subs	r0, r0, r6
 80007cc:	4298      	cmp	r0, r3
 80007ce:	d9f6      	bls.n	80007be <HAL_RCC_OscConfig+0x27e>
 80007d0:	e723      	b.n	800061a <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007d2:	2b05      	cmp	r3, #5
 80007d4:	d10b      	bne.n	80007ee <HAL_RCC_OscConfig+0x2ae>
 80007d6:	6a29      	ldr	r1, [r5, #32]
 80007d8:	3b01      	subs	r3, #1
 80007da:	430b      	orrs	r3, r1
 80007dc:	622b      	str	r3, [r5, #32]
 80007de:	6a2b      	ldr	r3, [r5, #32]
 80007e0:	431a      	orrs	r2, r3
 80007e2:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 80007e4:	f7ff fd70 	bl	80002c8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007e8:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80007ea:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007ec:	e00d      	b.n	800080a <HAL_RCC_OscConfig+0x2ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007ee:	6a2b      	ldr	r3, [r5, #32]
 80007f0:	4393      	bics	r3, r2
 80007f2:	2204      	movs	r2, #4
 80007f4:	622b      	str	r3, [r5, #32]
 80007f6:	6a2b      	ldr	r3, [r5, #32]
 80007f8:	4393      	bics	r3, r2
 80007fa:	e7c0      	b.n	800077e <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007fc:	f7ff fd64 	bl	80002c8 <HAL_GetTick>
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <HAL_RCC_OscConfig+0x338>)
 8000802:	1b80      	subs	r0, r0, r6
 8000804:	4298      	cmp	r0, r3
 8000806:	d900      	bls.n	800080a <HAL_RCC_OscConfig+0x2ca>
 8000808:	e707      	b.n	800061a <HAL_RCC_OscConfig+0xda>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800080a:	6a2b      	ldr	r3, [r5, #32]
 800080c:	423b      	tst	r3, r7
 800080e:	d0f5      	beq.n	80007fc <HAL_RCC_OscConfig+0x2bc>
    if(pwrclkchanged == SET)
 8000810:	9b00      	ldr	r3, [sp, #0]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d000      	beq.n	8000818 <HAL_RCC_OscConfig+0x2d8>
 8000816:	e6aa      	b.n	800056e <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000818:	69eb      	ldr	r3, [r5, #28]
 800081a:	4a18      	ldr	r2, [pc, #96]	; (800087c <HAL_RCC_OscConfig+0x33c>)
 800081c:	4013      	ands	r3, r2
 800081e:	61eb      	str	r3, [r5, #28]
 8000820:	e6a5      	b.n	800056e <HAL_RCC_OscConfig+0x2e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000822:	f7ff fd51 	bl	80002c8 <HAL_GetTick>
 8000826:	1bc0      	subs	r0, r0, r7
 8000828:	2802      	cmp	r0, #2
 800082a:	d800      	bhi.n	800082e <HAL_RCC_OscConfig+0x2ee>
 800082c:	e6b2      	b.n	8000594 <HAL_RCC_OscConfig+0x54>
 800082e:	e6f4      	b.n	800061a <HAL_RCC_OscConfig+0xda>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000830:	3205      	adds	r2, #5
 8000832:	d103      	bne.n	800083c <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000834:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000836:	439a      	bics	r2, r3
 8000838:	636a      	str	r2, [r5, #52]	; 0x34
 800083a:	e6af      	b.n	800059c <HAL_RCC_OscConfig+0x5c>
      __HAL_RCC_HSI14ADC_DISABLE();
 800083c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800083e:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000840:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000842:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000844:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000846:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000848:	4393      	bics	r3, r2
 800084a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800084c:	f7ff fd3c 	bl	80002c8 <HAL_GetTick>
 8000850:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000852:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000854:	4233      	tst	r3, r6
 8000856:	d100      	bne.n	800085a <HAL_RCC_OscConfig+0x31a>
 8000858:	e6a7      	b.n	80005aa <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800085a:	f7ff fd35 	bl	80002c8 <HAL_GetTick>
 800085e:	1bc0      	subs	r0, r0, r7
 8000860:	2802      	cmp	r0, #2
 8000862:	d9f6      	bls.n	8000852 <HAL_RCC_OscConfig+0x312>
 8000864:	e6d9      	b.n	800061a <HAL_RCC_OscConfig+0xda>
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	40021000 	.word	0x40021000
 800086c:	fffeffff 	.word	0xfffeffff
 8000870:	fffbffff 	.word	0xfffbffff
 8000874:	40007000 	.word	0x40007000
 8000878:	00001388 	.word	0x00001388
 800087c:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000880:	210c      	movs	r1, #12
 8000882:	4d53      	ldr	r5, [pc, #332]	; (80009d0 <HAL_RCC_OscConfig+0x490>)
 8000884:	686a      	ldr	r2, [r5, #4]
 8000886:	400a      	ands	r2, r1
 8000888:	428a      	cmp	r2, r1
 800088a:	d009      	beq.n	80008a0 <HAL_RCC_OscConfig+0x360>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800088c:	686b      	ldr	r3, [r5, #4]
 800088e:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000890:	2b08      	cmp	r3, #8
 8000892:	d10e      	bne.n	80008b2 <HAL_RCC_OscConfig+0x372>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000894:	22c0      	movs	r2, #192	; 0xc0
 8000896:	686b      	ldr	r3, [r5, #4]
 8000898:	0252      	lsls	r2, r2, #9
 800089a:	4013      	ands	r3, r2
 800089c:	4293      	cmp	r3, r2
 800089e:	d108      	bne.n	80008b2 <HAL_RCC_OscConfig+0x372>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80008a0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80008a2:	03db      	lsls	r3, r3, #15
 80008a4:	d400      	bmi.n	80008a8 <HAL_RCC_OscConfig+0x368>
 80008a6:	e684      	b.n	80005b2 <HAL_RCC_OscConfig+0x72>
 80008a8:	6a23      	ldr	r3, [r4, #32]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d000      	beq.n	80008b0 <HAL_RCC_OscConfig+0x370>
 80008ae:	e64c      	b.n	800054a <HAL_RCC_OscConfig+0xa>
 80008b0:	e67f      	b.n	80005b2 <HAL_RCC_OscConfig+0x72>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80008b2:	6a23      	ldr	r3, [r4, #32]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d011      	beq.n	80008dc <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_HSI48_ENABLE();
 80008b8:	2680      	movs	r6, #128	; 0x80
 80008ba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80008bc:	0276      	lsls	r6, r6, #9
 80008be:	4333      	orrs	r3, r6
 80008c0:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 80008c2:	f7ff fd01 	bl	80002c8 <HAL_GetTick>
 80008c6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80008c8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80008ca:	4233      	tst	r3, r6
 80008cc:	d000      	beq.n	80008d0 <HAL_RCC_OscConfig+0x390>
 80008ce:	e670      	b.n	80005b2 <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80008d0:	f7ff fcfa 	bl	80002c8 <HAL_GetTick>
 80008d4:	1bc0      	subs	r0, r0, r7
 80008d6:	2802      	cmp	r0, #2
 80008d8:	d9f6      	bls.n	80008c8 <HAL_RCC_OscConfig+0x388>
 80008da:	e69e      	b.n	800061a <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI48_DISABLE();
 80008dc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80008de:	4a3d      	ldr	r2, [pc, #244]	; (80009d4 <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80008e0:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 80008e2:	4013      	ands	r3, r2
 80008e4:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 80008e6:	f7ff fcef 	bl	80002c8 <HAL_GetTick>
 80008ea:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80008ec:	0276      	lsls	r6, r6, #9
 80008ee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80008f0:	4233      	tst	r3, r6
 80008f2:	d100      	bne.n	80008f6 <HAL_RCC_OscConfig+0x3b6>
 80008f4:	e65d      	b.n	80005b2 <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80008f6:	f7ff fce7 	bl	80002c8 <HAL_GetTick>
 80008fa:	1bc0      	subs	r0, r0, r7
 80008fc:	2802      	cmp	r0, #2
 80008fe:	d9f6      	bls.n	80008ee <HAL_RCC_OscConfig+0x3ae>
 8000900:	e68b      	b.n	800061a <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000902:	200c      	movs	r0, #12
 8000904:	4b32      	ldr	r3, [pc, #200]	; (80009d0 <HAL_RCC_OscConfig+0x490>)
 8000906:	6859      	ldr	r1, [r3, #4]
 8000908:	001d      	movs	r5, r3
 800090a:	4001      	ands	r1, r0
 800090c:	2908      	cmp	r1, #8
 800090e:	d044      	beq.n	800099a <HAL_RCC_OscConfig+0x45a>
        __HAL_RCC_PLL_DISABLE();
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4931      	ldr	r1, [pc, #196]	; (80009d8 <HAL_RCC_OscConfig+0x498>)
 8000914:	400b      	ands	r3, r1
 8000916:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000918:	2a02      	cmp	r2, #2
 800091a:	d12f      	bne.n	800097c <HAL_RCC_OscConfig+0x43c>
        tickstart = HAL_GetTick();
 800091c:	f7ff fcd4 	bl	80002c8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000920:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000922:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000924:	04b6      	lsls	r6, r6, #18
 8000926:	682b      	ldr	r3, [r5, #0]
 8000928:	4233      	tst	r3, r6
 800092a:	d121      	bne.n	8000970 <HAL_RCC_OscConfig+0x430>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800092c:	220f      	movs	r2, #15
 800092e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000930:	4393      	bics	r3, r2
 8000932:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000934:	4313      	orrs	r3, r2
 8000936:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000938:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800093a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800093c:	686a      	ldr	r2, [r5, #4]
 800093e:	430b      	orrs	r3, r1
 8000940:	4926      	ldr	r1, [pc, #152]	; (80009dc <HAL_RCC_OscConfig+0x49c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000942:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000944:	400a      	ands	r2, r1
 8000946:	4313      	orrs	r3, r2
 8000948:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800094a:	2380      	movs	r3, #128	; 0x80
 800094c:	682a      	ldr	r2, [r5, #0]
 800094e:	045b      	lsls	r3, r3, #17
 8000950:	4313      	orrs	r3, r2
 8000952:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000954:	f7ff fcb8 	bl	80002c8 <HAL_GetTick>
 8000958:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800095a:	04a4      	lsls	r4, r4, #18
 800095c:	682b      	ldr	r3, [r5, #0]
 800095e:	4223      	tst	r3, r4
 8000960:	d000      	beq.n	8000964 <HAL_RCC_OscConfig+0x424>
 8000962:	e62a      	b.n	80005ba <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000964:	f7ff fcb0 	bl	80002c8 <HAL_GetTick>
 8000968:	1b80      	subs	r0, r0, r6
 800096a:	2802      	cmp	r0, #2
 800096c:	d9f6      	bls.n	800095c <HAL_RCC_OscConfig+0x41c>
 800096e:	e654      	b.n	800061a <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000970:	f7ff fcaa 	bl	80002c8 <HAL_GetTick>
 8000974:	1bc0      	subs	r0, r0, r7
 8000976:	2802      	cmp	r0, #2
 8000978:	d9d5      	bls.n	8000926 <HAL_RCC_OscConfig+0x3e6>
 800097a:	e64e      	b.n	800061a <HAL_RCC_OscConfig+0xda>
        tickstart = HAL_GetTick();
 800097c:	f7ff fca4 	bl	80002c8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000980:	2480      	movs	r4, #128	; 0x80
        tickstart = HAL_GetTick();
 8000982:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000984:	04a4      	lsls	r4, r4, #18
 8000986:	682b      	ldr	r3, [r5, #0]
 8000988:	4223      	tst	r3, r4
 800098a:	d100      	bne.n	800098e <HAL_RCC_OscConfig+0x44e>
 800098c:	e615      	b.n	80005ba <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800098e:	f7ff fc9b 	bl	80002c8 <HAL_GetTick>
 8000992:	1b80      	subs	r0, r0, r6
 8000994:	2802      	cmp	r0, #2
 8000996:	d9f6      	bls.n	8000986 <HAL_RCC_OscConfig+0x446>
 8000998:	e63f      	b.n	800061a <HAL_RCC_OscConfig+0xda>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800099a:	2a01      	cmp	r2, #1
 800099c:	d100      	bne.n	80009a0 <HAL_RCC_OscConfig+0x460>
 800099e:	e5d4      	b.n	800054a <HAL_RCC_OscConfig+0xa>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80009a0:	22c0      	movs	r2, #192	; 0xc0
        pll_config  = RCC->CFGR;
 80009a2:	6858      	ldr	r0, [r3, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80009a4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80009a6:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 80009a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80009aa:	4002      	ands	r2, r0
 80009ac:	428a      	cmp	r2, r1
 80009ae:	d000      	beq.n	80009b2 <HAL_RCC_OscConfig+0x472>
 80009b0:	e5cb      	b.n	800054a <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80009b2:	220f      	movs	r2, #15
 80009b4:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80009b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d000      	beq.n	80009be <HAL_RCC_OscConfig+0x47e>
 80009bc:	e5c5      	b.n	800054a <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80009be:	23f0      	movs	r3, #240	; 0xf0
 80009c0:	039b      	lsls	r3, r3, #14
 80009c2:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80009c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009c6:	1ac0      	subs	r0, r0, r3
 80009c8:	1e43      	subs	r3, r0, #1
 80009ca:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80009cc:	b2c0      	uxtb	r0, r0
 80009ce:	e5bd      	b.n	800054c <HAL_RCC_OscConfig+0xc>
 80009d0:	40021000 	.word	0x40021000
 80009d4:	fffeffff 	.word	0xfffeffff
 80009d8:	feffffff 	.word	0xfeffffff
 80009dc:	ffc27fff 	.word	0xffc27fff

080009e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80009e0:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80009e2:	4c19      	ldr	r4, [pc, #100]	; (8000a48 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80009e4:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80009e6:	2210      	movs	r2, #16
 80009e8:	0021      	movs	r1, r4
 80009ea:	4668      	mov	r0, sp
 80009ec:	f001 f87c 	bl	8001ae8 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80009f0:	0021      	movs	r1, r4
 80009f2:	ad04      	add	r5, sp, #16
 80009f4:	2210      	movs	r2, #16
 80009f6:	3110      	adds	r1, #16
 80009f8:	0028      	movs	r0, r5
 80009fa:	f001 f875 	bl	8001ae8 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80009fe:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000a00:	4e12      	ldr	r6, [pc, #72]	; (8000a4c <HAL_RCC_GetSysClockFreq+0x6c>)
 8000a02:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000a04:	401a      	ands	r2, r3
 8000a06:	2a08      	cmp	r2, #8
 8000a08:	d004      	beq.n	8000a14 <HAL_RCC_GetSysClockFreq+0x34>
 8000a0a:	2a0c      	cmp	r2, #12
 8000a0c:	d11a      	bne.n	8000a44 <HAL_RCC_GetSysClockFreq+0x64>
      break;
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8000a0e:	4810      	ldr	r0, [pc, #64]	; (8000a50 <HAL_RCC_GetSysClockFreq+0x70>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a10:	b008      	add	sp, #32
 8000a12:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000a14:	200f      	movs	r0, #15
 8000a16:	466a      	mov	r2, sp
 8000a18:	0c99      	lsrs	r1, r3, #18
 8000a1a:	4001      	ands	r1, r0
 8000a1c:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000a1e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000a20:	4002      	ands	r2, r0
 8000a22:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000a24:	22c0      	movs	r2, #192	; 0xc0
 8000a26:	2080      	movs	r0, #128	; 0x80
 8000a28:	0252      	lsls	r2, r2, #9
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	0240      	lsls	r0, r0, #9
 8000a2e:	4283      	cmp	r3, r0
 8000a30:	d101      	bne.n	8000a36 <HAL_RCC_GetSysClockFreq+0x56>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000a32:	4808      	ldr	r0, [pc, #32]	; (8000a54 <HAL_RCC_GetSysClockFreq+0x74>)
 8000a34:	e002      	b.n	8000a3c <HAL_RCC_GetSysClockFreq+0x5c>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d1fb      	bne.n	8000a32 <HAL_RCC_GetSysClockFreq+0x52>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <HAL_RCC_GetSysClockFreq+0x70>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000a3c:	f7ff fb78 	bl	8000130 <__udivsi3>
 8000a40:	4360      	muls	r0, r4
 8000a42:	e7e5      	b.n	8000a10 <HAL_RCC_GetSysClockFreq+0x30>
      sysclockfreq = HSE_VALUE;
 8000a44:	4803      	ldr	r0, [pc, #12]	; (8000a54 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000a46:	e7e3      	b.n	8000a10 <HAL_RCC_GetSysClockFreq+0x30>
 8000a48:	08002478 	.word	0x08002478
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	02dc6c00 	.word	0x02dc6c00
 8000a54:	007a1200 	.word	0x007a1200

08000a58 <HAL_RCC_ClockConfig>:
{
 8000a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000a5a:	0005      	movs	r5, r0
 8000a5c:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	d101      	bne.n	8000a66 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8000a62:	2001      	movs	r0, #1
}
 8000a64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000a66:	2201      	movs	r2, #1
 8000a68:	4c3b      	ldr	r4, [pc, #236]	; (8000b58 <HAL_RCC_ClockConfig+0x100>)
 8000a6a:	6823      	ldr	r3, [r4, #0]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	d31c      	bcc.n	8000aac <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a72:	6829      	ldr	r1, [r5, #0]
 8000a74:	078b      	lsls	r3, r1, #30
 8000a76:	d422      	bmi.n	8000abe <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a78:	07cb      	lsls	r3, r1, #31
 8000a7a:	d42f      	bmi.n	8000adc <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	6822      	ldr	r2, [r4, #0]
 8000a80:	401a      	ands	r2, r3
 8000a82:	4297      	cmp	r7, r2
 8000a84:	d359      	bcc.n	8000b3a <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a86:	682b      	ldr	r3, [r5, #0]
 8000a88:	4c34      	ldr	r4, [pc, #208]	; (8000b5c <HAL_RCC_ClockConfig+0x104>)
 8000a8a:	075b      	lsls	r3, r3, #29
 8000a8c:	d45d      	bmi.n	8000b4a <HAL_RCC_ClockConfig+0xf2>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a8e:	f7ff ffa7 	bl	80009e0 <HAL_RCC_GetSysClockFreq>
 8000a92:	6863      	ldr	r3, [r4, #4]
 8000a94:	4a32      	ldr	r2, [pc, #200]	; (8000b60 <HAL_RCC_ClockConfig+0x108>)
 8000a96:	061b      	lsls	r3, r3, #24
 8000a98:	0f1b      	lsrs	r3, r3, #28
 8000a9a:	5cd3      	ldrb	r3, [r2, r3]
 8000a9c:	40d8      	lsrs	r0, r3
 8000a9e:	4b31      	ldr	r3, [pc, #196]	; (8000b64 <HAL_RCC_ClockConfig+0x10c>)
 8000aa0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f7ff fbd0 	bl	8000248 <HAL_InitTick>
  return HAL_OK;
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	e7db      	b.n	8000a64 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000aac:	6823      	ldr	r3, [r4, #0]
 8000aae:	4393      	bics	r3, r2
 8000ab0:	430b      	orrs	r3, r1
 8000ab2:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ab4:	6823      	ldr	r3, [r4, #0]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	4299      	cmp	r1, r3
 8000aba:	d1d2      	bne.n	8000a62 <HAL_RCC_ClockConfig+0xa>
 8000abc:	e7d9      	b.n	8000a72 <HAL_RCC_ClockConfig+0x1a>
 8000abe:	4a27      	ldr	r2, [pc, #156]	; (8000b5c <HAL_RCC_ClockConfig+0x104>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ac0:	074b      	lsls	r3, r1, #29
 8000ac2:	d504      	bpl.n	8000ace <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000ac4:	23e0      	movs	r3, #224	; 0xe0
 8000ac6:	6850      	ldr	r0, [r2, #4]
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	4303      	orrs	r3, r0
 8000acc:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ace:	20f0      	movs	r0, #240	; 0xf0
 8000ad0:	6853      	ldr	r3, [r2, #4]
 8000ad2:	4383      	bics	r3, r0
 8000ad4:	68a8      	ldr	r0, [r5, #8]
 8000ad6:	4303      	orrs	r3, r0
 8000ad8:	6053      	str	r3, [r2, #4]
 8000ada:	e7cd      	b.n	8000a78 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000adc:	686a      	ldr	r2, [r5, #4]
 8000ade:	4e1f      	ldr	r6, [pc, #124]	; (8000b5c <HAL_RCC_ClockConfig+0x104>)
 8000ae0:	2a01      	cmp	r2, #1
 8000ae2:	d11a      	bne.n	8000b1a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ae4:	6833      	ldr	r3, [r6, #0]
 8000ae6:	039b      	lsls	r3, r3, #14
 8000ae8:	d5bb      	bpl.n	8000a62 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000aea:	2103      	movs	r1, #3
 8000aec:	6873      	ldr	r3, [r6, #4]
 8000aee:	438b      	bics	r3, r1
 8000af0:	4313      	orrs	r3, r2
 8000af2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000af4:	f7ff fbe8 	bl	80002c8 <HAL_GetTick>
 8000af8:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000afa:	230c      	movs	r3, #12
 8000afc:	6872      	ldr	r2, [r6, #4]
 8000afe:	401a      	ands	r2, r3
 8000b00:	686b      	ldr	r3, [r5, #4]
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d0b9      	beq.n	8000a7c <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b08:	f7ff fbde 	bl	80002c8 <HAL_GetTick>
 8000b0c:	9b01      	ldr	r3, [sp, #4]
 8000b0e:	1ac0      	subs	r0, r0, r3
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <HAL_RCC_ClockConfig+0x110>)
 8000b12:	4298      	cmp	r0, r3
 8000b14:	d9f1      	bls.n	8000afa <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8000b16:	2003      	movs	r0, #3
 8000b18:	e7a4      	b.n	8000a64 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b1a:	2a02      	cmp	r2, #2
 8000b1c:	d103      	bne.n	8000b26 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b1e:	6833      	ldr	r3, [r6, #0]
 8000b20:	019b      	lsls	r3, r3, #6
 8000b22:	d4e2      	bmi.n	8000aea <HAL_RCC_ClockConfig+0x92>
 8000b24:	e79d      	b.n	8000a62 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000b26:	2a03      	cmp	r2, #3
 8000b28:	d103      	bne.n	8000b32 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000b2a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8000b2c:	03db      	lsls	r3, r3, #15
 8000b2e:	d4dc      	bmi.n	8000aea <HAL_RCC_ClockConfig+0x92>
 8000b30:	e797      	b.n	8000a62 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b32:	6833      	ldr	r3, [r6, #0]
 8000b34:	079b      	lsls	r3, r3, #30
 8000b36:	d4d8      	bmi.n	8000aea <HAL_RCC_ClockConfig+0x92>
 8000b38:	e793      	b.n	8000a62 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b3a:	6822      	ldr	r2, [r4, #0]
 8000b3c:	439a      	bics	r2, r3
 8000b3e:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b40:	6822      	ldr	r2, [r4, #0]
 8000b42:	421a      	tst	r2, r3
 8000b44:	d000      	beq.n	8000b48 <HAL_RCC_ClockConfig+0xf0>
 8000b46:	e78c      	b.n	8000a62 <HAL_RCC_ClockConfig+0xa>
 8000b48:	e79d      	b.n	8000a86 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000b4a:	6863      	ldr	r3, [r4, #4]
 8000b4c:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <HAL_RCC_ClockConfig+0x114>)
 8000b4e:	4013      	ands	r3, r2
 8000b50:	68ea      	ldr	r2, [r5, #12]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	6063      	str	r3, [r4, #4]
 8000b56:	e79a      	b.n	8000a8e <HAL_RCC_ClockConfig+0x36>
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	080024a3 	.word	0x080024a3
 8000b64:	2000000c 	.word	0x2000000c
 8000b68:	00001388 	.word	0x00001388
 8000b6c:	fffff8ff 	.word	0xfffff8ff

08000b70 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000b72:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	055b      	lsls	r3, r3, #21
 8000b78:	0f5b      	lsrs	r3, r3, #29
 8000b7a:	5cd3      	ldrb	r3, [r2, r3]
 8000b7c:	4a03      	ldr	r2, [pc, #12]	; (8000b8c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000b7e:	6810      	ldr	r0, [r2, #0]
 8000b80:	40d8      	lsrs	r0, r3
}    
 8000b82:	4770      	bx	lr
 8000b84:	40021000 	.word	0x40021000
 8000b88:	080024b3 	.word	0x080024b3
 8000b8c:	2000000c 	.word	0x2000000c

08000b90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000b90:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000b92:	6803      	ldr	r3, [r0, #0]
{
 8000b94:	b085      	sub	sp, #20
 8000b96:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000b98:	03db      	lsls	r3, r3, #15
 8000b9a:	d528      	bpl.n	8000bee <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b9c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000b9e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ba0:	4c44      	ldr	r4, [pc, #272]	; (8000cb4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000ba2:	0552      	lsls	r2, r2, #21
 8000ba4:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000ba6:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ba8:	4213      	tst	r3, r2
 8000baa:	d108      	bne.n	8000bbe <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000bac:	69e3      	ldr	r3, [r4, #28]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	61e3      	str	r3, [r4, #28]
 8000bb2:	69e3      	ldr	r3, [r4, #28]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	9303      	str	r3, [sp, #12]
 8000bb8:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bbe:	2780      	movs	r7, #128	; 0x80
 8000bc0:	4e3d      	ldr	r6, [pc, #244]	; (8000cb8 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8000bc2:	007f      	lsls	r7, r7, #1
 8000bc4:	6833      	ldr	r3, [r6, #0]
 8000bc6:	423b      	tst	r3, r7
 8000bc8:	d041      	beq.n	8000c4e <HAL_RCCEx_PeriphCLKConfig+0xbe>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000bca:	22c0      	movs	r2, #192	; 0xc0
 8000bcc:	6a23      	ldr	r3, [r4, #32]
 8000bce:	0092      	lsls	r2, r2, #2
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	4e3a      	ldr	r6, [pc, #232]	; (8000cbc <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000bd4:	d14d      	bne.n	8000c72 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000bd6:	6a23      	ldr	r3, [r4, #32]
 8000bd8:	401e      	ands	r6, r3
 8000bda:	686b      	ldr	r3, [r5, #4]
 8000bdc:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000bde:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000be0:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d103      	bne.n	8000bee <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000be6:	69e3      	ldr	r3, [r4, #28]
 8000be8:	4a35      	ldr	r2, [pc, #212]	; (8000cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8000bea:	4013      	ands	r3, r2
 8000bec:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000bee:	682b      	ldr	r3, [r5, #0]
 8000bf0:	07da      	lsls	r2, r3, #31
 8000bf2:	d506      	bpl.n	8000c02 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	492f      	ldr	r1, [pc, #188]	; (8000cb4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000bf8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000bfa:	4382      	bics	r2, r0
 8000bfc:	68a8      	ldr	r0, [r5, #8]
 8000bfe:	4302      	orrs	r2, r0
 8000c00:	630a      	str	r2, [r1, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000c02:	079a      	lsls	r2, r3, #30
 8000c04:	d506      	bpl.n	8000c14 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000c06:	492b      	ldr	r1, [pc, #172]	; (8000cb4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000c08:	482e      	ldr	r0, [pc, #184]	; (8000cc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8000c0a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000c0c:	4002      	ands	r2, r0
 8000c0e:	68e8      	ldr	r0, [r5, #12]
 8000c10:	4302      	orrs	r2, r0
 8000c12:	630a      	str	r2, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000c14:	069a      	lsls	r2, r3, #26
 8000c16:	d506      	bpl.n	8000c26 <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000c18:	2010      	movs	r0, #16
 8000c1a:	4926      	ldr	r1, [pc, #152]	; (8000cb4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000c1c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000c1e:	4382      	bics	r2, r0
 8000c20:	6928      	ldr	r0, [r5, #16]
 8000c22:	4302      	orrs	r2, r0
 8000c24:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000c26:	039a      	lsls	r2, r3, #14
 8000c28:	d506      	bpl.n	8000c38 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000c2a:	2080      	movs	r0, #128	; 0x80
 8000c2c:	4921      	ldr	r1, [pc, #132]	; (8000cb4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000c2e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000c30:	4382      	bics	r2, r0
 8000c32:	69a8      	ldr	r0, [r5, #24]
 8000c34:	4302      	orrs	r2, r0
 8000c36:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000c38:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8000c3a:	055b      	lsls	r3, r3, #21
 8000c3c:	d517      	bpl.n	8000c6e <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8000c3e:	2140      	movs	r1, #64	; 0x40
 8000c40:	4a1c      	ldr	r2, [pc, #112]	; (8000cb4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000c42:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c44:	438b      	bics	r3, r1
 8000c46:	6969      	ldr	r1, [r5, #20]
 8000c48:	430b      	orrs	r3, r1
 8000c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4c:	e00f      	b.n	8000c6e <HAL_RCCEx_PeriphCLKConfig+0xde>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c4e:	6833      	ldr	r3, [r6, #0]
 8000c50:	433b      	orrs	r3, r7
 8000c52:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000c54:	f7ff fb38 	bl	80002c8 <HAL_GetTick>
 8000c58:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c5a:	6833      	ldr	r3, [r6, #0]
 8000c5c:	423b      	tst	r3, r7
 8000c5e:	d1b4      	bne.n	8000bca <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c60:	f7ff fb32 	bl	80002c8 <HAL_GetTick>
 8000c64:	9b01      	ldr	r3, [sp, #4]
 8000c66:	1ac0      	subs	r0, r0, r3
 8000c68:	2864      	cmp	r0, #100	; 0x64
 8000c6a:	d9f6      	bls.n	8000c5a <HAL_RCCEx_PeriphCLKConfig+0xca>
          return HAL_TIMEOUT;
 8000c6c:	2003      	movs	r0, #3
}
 8000c6e:	b005      	add	sp, #20
 8000c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c72:	6869      	ldr	r1, [r5, #4]
 8000c74:	400a      	ands	r2, r1
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d0ad      	beq.n	8000bd6 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c7a:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c7c:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c7e:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c80:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c82:	025b      	lsls	r3, r3, #9
 8000c84:	4303      	orrs	r3, r0
 8000c86:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000c88:	6a23      	ldr	r3, [r4, #32]
 8000c8a:	480f      	ldr	r0, [pc, #60]	; (8000cc8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c8c:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000c8e:	4003      	ands	r3, r0
 8000c90:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8000c92:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000c94:	07d3      	lsls	r3, r2, #31
 8000c96:	d59e      	bpl.n	8000bd6 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8000c98:	f7ff fb16 	bl	80002c8 <HAL_GetTick>
 8000c9c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	6a23      	ldr	r3, [r4, #32]
 8000ca2:	4213      	tst	r3, r2
 8000ca4:	d197      	bne.n	8000bd6 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ca6:	f7ff fb0f 	bl	80002c8 <HAL_GetTick>
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8000cac:	1bc0      	subs	r0, r0, r7
 8000cae:	4298      	cmp	r0, r3
 8000cb0:	d9f5      	bls.n	8000c9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8000cb2:	e7db      	b.n	8000c6c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40007000 	.word	0x40007000
 8000cbc:	fffffcff 	.word	0xfffffcff
 8000cc0:	efffffff 	.word	0xefffffff
 8000cc4:	fffcffff 	.word	0xfffcffff
 8000cc8:	fffeffff 	.word	0xfffeffff
 8000ccc:	00001388 	.word	0x00001388

08000cd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cd2:	0004      	movs	r4, r0
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8000cd4:	2001      	movs	r0, #1
  if (hspi == NULL)
 8000cd6:	2c00      	cmp	r4, #0
 8000cd8:	d04b      	beq.n	8000d72 <HAL_SPI_Init+0xa2>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cda:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000cdc:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cde:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000ce0:	355d      	adds	r5, #93	; 0x5d
 8000ce2:	782b      	ldrb	r3, [r5, #0]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d105      	bne.n	8000cf6 <HAL_SPI_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000cea:	0022      	movs	r2, r4
 8000cec:	325c      	adds	r2, #92	; 0x5c
 8000cee:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000cf0:	0020      	movs	r0, r4
 8000cf2:	f000 fdbd 	bl	8001870 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000cf6:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000cf8:	2240      	movs	r2, #64	; 0x40
 8000cfa:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000cfc:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8000cfe:	680b      	ldr	r3, [r1, #0]
 8000d00:	2000      	movs	r0, #0
 8000d02:	4393      	bics	r3, r2
 8000d04:	600b      	str	r3, [r1, #0]
 8000d06:	23e0      	movs	r3, #224	; 0xe0

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000d08:	68e2      	ldr	r2, [r4, #12]
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d931      	bls.n	8000d74 <HAL_SPI_Init+0xa4>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000d10:	26f0      	movs	r6, #240	; 0xf0
 8000d12:	0136      	lsls	r6, r6, #4
 8000d14:	42b2      	cmp	r2, r6
 8000d16:	d133      	bne.n	8000d80 <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000d18:	0006      	movs	r6, r0
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8000d1a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000d1c:	2800      	cmp	r0, #0
 8000d1e:	d103      	bne.n	8000d28 <HAL_SPI_Init+0x58>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d92f      	bls.n	8000d84 <HAL_SPI_Init+0xb4>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8000d24:	2302      	movs	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000d26:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8000d28:	68a7      	ldr	r7, [r4, #8]
 8000d2a:	6863      	ldr	r3, [r4, #4]
 8000d2c:	69a0      	ldr	r0, [r4, #24]
 8000d2e:	433b      	orrs	r3, r7
 8000d30:	6927      	ldr	r7, [r4, #16]
 8000d32:	433b      	orrs	r3, r7
 8000d34:	6967      	ldr	r7, [r4, #20]
 8000d36:	433b      	orrs	r3, r7
 8000d38:	69e7      	ldr	r7, [r4, #28]
 8000d3a:	433b      	orrs	r3, r7
 8000d3c:	6a27      	ldr	r7, [r4, #32]
 8000d3e:	433b      	orrs	r3, r7
 8000d40:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8000d42:	433b      	orrs	r3, r7
 8000d44:	2780      	movs	r7, #128	; 0x80
 8000d46:	00bf      	lsls	r7, r7, #2
 8000d48:	4007      	ands	r7, r0
 8000d4a:	433b      	orrs	r3, r7
 8000d4c:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8000d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d50:	0c00      	lsrs	r0, r0, #16
 8000d52:	431a      	orrs	r2, r3
 8000d54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d56:	431a      	orrs	r2, r3
 8000d58:	2304      	movs	r3, #4
 8000d5a:	4018      	ands	r0, r3
 8000d5c:	4310      	orrs	r0, r2
 8000d5e:	4306      	orrs	r6, r0
 8000d60:	604e      	str	r6, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000d62:	69cb      	ldr	r3, [r1, #28]
 8000d64:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_SPI_Init+0xb8>)
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000d66:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000d68:	4013      	ands	r3, r2
 8000d6a:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8000d6c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000d6e:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8000d70:	702b      	strb	r3, [r5, #0]

  return HAL_OK;
}
 8000d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8000d74:	2680      	movs	r6, #128	; 0x80
 8000d76:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d0ce      	beq.n	8000d1a <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d7c:	62a0      	str	r0, [r4, #40]	; 0x28
 8000d7e:	e7cc      	b.n	8000d1a <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000d80:	0006      	movs	r6, r0
 8000d82:	e7fb      	b.n	8000d7c <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e7ce      	b.n	8000d26 <HAL_SPI_Init+0x56>
 8000d88:	fffff7ff 	.word	0xfffff7ff

08000d8c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d8c:	4a20      	ldr	r2, [pc, #128]	; (8000e10 <TIM_Base_SetConfig+0x84>)
{
 8000d8e:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8000d90:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d92:	4290      	cmp	r0, r2
 8000d94:	d006      	beq.n	8000da4 <TIM_Base_SetConfig+0x18>
 8000d96:	2480      	movs	r4, #128	; 0x80
 8000d98:	05e4      	lsls	r4, r4, #23
 8000d9a:	42a0      	cmp	r0, r4
 8000d9c:	d002      	beq.n	8000da4 <TIM_Base_SetConfig+0x18>
 8000d9e:	4c1d      	ldr	r4, [pc, #116]	; (8000e14 <TIM_Base_SetConfig+0x88>)
 8000da0:	42a0      	cmp	r0, r4
 8000da2:	d10c      	bne.n	8000dbe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000da4:	2470      	movs	r4, #112	; 0x70
 8000da6:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8000da8:	684c      	ldr	r4, [r1, #4]
 8000daa:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d012      	beq.n	8000dd6 <TIM_Base_SetConfig+0x4a>
 8000db0:	2480      	movs	r4, #128	; 0x80
 8000db2:	05e4      	lsls	r4, r4, #23
 8000db4:	42a0      	cmp	r0, r4
 8000db6:	d00e      	beq.n	8000dd6 <TIM_Base_SetConfig+0x4a>
 8000db8:	4c16      	ldr	r4, [pc, #88]	; (8000e14 <TIM_Base_SetConfig+0x88>)
 8000dba:	42a0      	cmp	r0, r4
 8000dbc:	d00b      	beq.n	8000dd6 <TIM_Base_SetConfig+0x4a>
 8000dbe:	4c16      	ldr	r4, [pc, #88]	; (8000e18 <TIM_Base_SetConfig+0x8c>)
 8000dc0:	42a0      	cmp	r0, r4
 8000dc2:	d008      	beq.n	8000dd6 <TIM_Base_SetConfig+0x4a>
 8000dc4:	4c15      	ldr	r4, [pc, #84]	; (8000e1c <TIM_Base_SetConfig+0x90>)
 8000dc6:	42a0      	cmp	r0, r4
 8000dc8:	d005      	beq.n	8000dd6 <TIM_Base_SetConfig+0x4a>
 8000dca:	4c15      	ldr	r4, [pc, #84]	; (8000e20 <TIM_Base_SetConfig+0x94>)
 8000dcc:	42a0      	cmp	r0, r4
 8000dce:	d002      	beq.n	8000dd6 <TIM_Base_SetConfig+0x4a>
 8000dd0:	4c14      	ldr	r4, [pc, #80]	; (8000e24 <TIM_Base_SetConfig+0x98>)
 8000dd2:	42a0      	cmp	r0, r4
 8000dd4:	d103      	bne.n	8000dde <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000dd6:	4c14      	ldr	r4, [pc, #80]	; (8000e28 <TIM_Base_SetConfig+0x9c>)
 8000dd8:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000dda:	68cc      	ldr	r4, [r1, #12]
 8000ddc:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000dde:	2480      	movs	r4, #128	; 0x80
 8000de0:	43a3      	bics	r3, r4
 8000de2:	694c      	ldr	r4, [r1, #20]
 8000de4:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8000de6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000de8:	688b      	ldr	r3, [r1, #8]
 8000dea:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000dec:	680b      	ldr	r3, [r1, #0]
 8000dee:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000df0:	4290      	cmp	r0, r2
 8000df2:	d008      	beq.n	8000e06 <TIM_Base_SetConfig+0x7a>
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <TIM_Base_SetConfig+0x90>)
 8000df6:	4298      	cmp	r0, r3
 8000df8:	d005      	beq.n	8000e06 <TIM_Base_SetConfig+0x7a>
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <TIM_Base_SetConfig+0x94>)
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	d002      	beq.n	8000e06 <TIM_Base_SetConfig+0x7a>
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <TIM_Base_SetConfig+0x98>)
 8000e02:	4298      	cmp	r0, r3
 8000e04:	d101      	bne.n	8000e0a <TIM_Base_SetConfig+0x7e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000e06:	690b      	ldr	r3, [r1, #16]
 8000e08:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	6143      	str	r3, [r0, #20]
}
 8000e0e:	bd10      	pop	{r4, pc}
 8000e10:	40012c00 	.word	0x40012c00
 8000e14:	40000400 	.word	0x40000400
 8000e18:	40002000 	.word	0x40002000
 8000e1c:	40014000 	.word	0x40014000
 8000e20:	40014400 	.word	0x40014400
 8000e24:	40014800 	.word	0x40014800
 8000e28:	fffffcff 	.word	0xfffffcff

08000e2c <HAL_TIM_Base_Init>:
{
 8000e2c:	b570      	push	{r4, r5, r6, lr}
 8000e2e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000e30:	2001      	movs	r0, #1
  if (htim == NULL)
 8000e32:	2c00      	cmp	r4, #0
 8000e34:	d014      	beq.n	8000e60 <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000e36:	0025      	movs	r5, r4
 8000e38:	353d      	adds	r5, #61	; 0x3d
 8000e3a:	782b      	ldrb	r3, [r5, #0]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d105      	bne.n	8000e4e <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8000e42:	0022      	movs	r2, r4
 8000e44:	323c      	adds	r2, #60	; 0x3c
 8000e46:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8000e48:	0020      	movs	r0, r4
 8000e4a:	f000 fd65 	bl	8001918 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000e4e:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000e50:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000e52:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000e54:	1d21      	adds	r1, r4, #4
 8000e56:	f7ff ff99 	bl	8000d8c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000e5a:	2301      	movs	r3, #1
  return HAL_OK;
 8000e5c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000e5e:	702b      	strb	r3, [r5, #0]
}
 8000e60:	bd70      	pop	{r4, r5, r6, pc}
	...

08000e64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000e64:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8000e66:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000e68:	4d03      	ldr	r5, [pc, #12]	; (8000e78 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000e6e:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e70:	4313      	orrs	r3, r2
 8000e72:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000e74:	6083      	str	r3, [r0, #8]
}
 8000e76:	bd30      	pop	{r4, r5, pc}
 8000e78:	ffff00ff 	.word	0xffff00ff

08000e7c <HAL_TIM_ConfigClockSource>:
{
 8000e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8000e7e:	0005      	movs	r5, r0
 8000e80:	2302      	movs	r3, #2
 8000e82:	353c      	adds	r5, #60	; 0x3c
 8000e84:	782a      	ldrb	r2, [r5, #0]
{
 8000e86:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8000e88:	0018      	movs	r0, r3
 8000e8a:	2a01      	cmp	r2, #1
 8000e8c:	d016      	beq.n	8000ebc <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8000e8e:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8000e90:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 8000e92:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000e94:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8000e96:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000e98:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8000e9a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000e9c:	4a40      	ldr	r2, [pc, #256]	; (8000fa0 <HAL_TIM_ConfigClockSource+0x124>)
 8000e9e:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8000ea0:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8000ea2:	680b      	ldr	r3, [r1, #0]
 8000ea4:	2b40      	cmp	r3, #64	; 0x40
 8000ea6:	d065      	beq.n	8000f74 <HAL_TIM_ConfigClockSource+0xf8>
 8000ea8:	d814      	bhi.n	8000ed4 <HAL_TIM_ConfigClockSource+0x58>
 8000eaa:	2b10      	cmp	r3, #16
 8000eac:	d00b      	beq.n	8000ec6 <HAL_TIM_ConfigClockSource+0x4a>
 8000eae:	d806      	bhi.n	8000ebe <HAL_TIM_ConfigClockSource+0x42>
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d008      	beq.n	8000ec6 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8000eb4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000eb6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000eb8:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8000eba:	7028      	strb	r0, [r5, #0]
}
 8000ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8000ebe:	2b20      	cmp	r3, #32
 8000ec0:	d001      	beq.n	8000ec6 <HAL_TIM_ConfigClockSource+0x4a>
 8000ec2:	2b30      	cmp	r3, #48	; 0x30
 8000ec4:	d1f6      	bne.n	8000eb4 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr &= ~TIM_SMCR_TS;
 8000ec6:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8000ec8:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000eca:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000ecc:	3a69      	subs	r2, #105	; 0x69
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	430b      	orrs	r3, r1
 8000ed2:	e01a      	b.n	8000f0a <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 8000ed4:	2b60      	cmp	r3, #96	; 0x60
 8000ed6:	d035      	beq.n	8000f44 <HAL_TIM_ConfigClockSource+0xc8>
 8000ed8:	d819      	bhi.n	8000f0e <HAL_TIM_ConfigClockSource+0x92>
 8000eda:	2b50      	cmp	r3, #80	; 0x50
 8000edc:	d1ea      	bne.n	8000eb4 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000ede:	684a      	ldr	r2, [r1, #4]
 8000ee0:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8000ee2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ee4:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000ee6:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ee8:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000eea:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000eec:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000eee:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000ef0:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000ef2:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000ef4:	240a      	movs	r4, #10
 8000ef6:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8000ef8:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8000efa:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8000efc:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000efe:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8000f00:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000f02:	4393      	bics	r3, r2
 8000f04:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000f06:	2357      	movs	r3, #87	; 0x57
 8000f08:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8000f0a:	6083      	str	r3, [r0, #8]
 8000f0c:	e7d2      	b.n	8000eb4 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8000f0e:	2b70      	cmp	r3, #112	; 0x70
 8000f10:	d00d      	beq.n	8000f2e <HAL_TIM_ConfigClockSource+0xb2>
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	0192      	lsls	r2, r2, #6
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d1cc      	bne.n	8000eb4 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8000f1a:	68cb      	ldr	r3, [r1, #12]
 8000f1c:	684a      	ldr	r2, [r1, #4]
 8000f1e:	6889      	ldr	r1, [r1, #8]
 8000f20:	f7ff ffa0 	bl	8000e64 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	6822      	ldr	r2, [r4, #0]
 8000f28:	01db      	lsls	r3, r3, #7
 8000f2a:	6891      	ldr	r1, [r2, #8]
 8000f2c:	e007      	b.n	8000f3e <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 8000f2e:	68cb      	ldr	r3, [r1, #12]
 8000f30:	684a      	ldr	r2, [r1, #4]
 8000f32:	6889      	ldr	r1, [r1, #8]
 8000f34:	f7ff ff96 	bl	8000e64 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000f38:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8000f3a:	6822      	ldr	r2, [r4, #0]
 8000f3c:	6891      	ldr	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000f3e:	430b      	orrs	r3, r1
 8000f40:	6093      	str	r3, [r2, #8]
      break;
 8000f42:	e7b7      	b.n	8000eb4 <HAL_TIM_ConfigClockSource+0x38>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000f44:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000f46:	684b      	ldr	r3, [r1, #4]
 8000f48:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000f4a:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000f4c:	4f15      	ldr	r7, [pc, #84]	; (8000fa4 <HAL_TIM_ConfigClockSource+0x128>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000f4e:	43a1      	bics	r1, r4
 8000f50:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000f52:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000f54:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000f56:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000f58:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000f5a:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8000f5c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8000f5e:	6182      	str	r2, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000f60:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000f62:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8000f64:	011b      	lsls	r3, r3, #4
 8000f66:	430b      	orrs	r3, r1
  TIMx->CCER = tmpccer;
 8000f68:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8000f6a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000f6c:	4393      	bics	r3, r2
 8000f6e:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000f70:	2367      	movs	r3, #103	; 0x67
 8000f72:	e7c9      	b.n	8000f08 <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000f74:	684a      	ldr	r2, [r1, #4]
 8000f76:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8000f78:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f7a:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000f7c:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f7e:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f80:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f82:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000f84:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f86:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000f88:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000f8a:	240a      	movs	r4, #10
 8000f8c:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8000f8e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8000f90:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8000f92:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000f94:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8000f96:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000f98:	4393      	bics	r3, r2
 8000f9a:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000f9c:	2347      	movs	r3, #71	; 0x47
 8000f9e:	e7b3      	b.n	8000f08 <HAL_TIM_ConfigClockSource+0x8c>
 8000fa0:	ffff0088 	.word	0xffff0088
 8000fa4:	ffff0fff 	.word	0xffff0fff

08000fa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8000fa8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8000faa:	0004      	movs	r4, r0
 8000fac:	2202      	movs	r2, #2
 8000fae:	343c      	adds	r4, #60	; 0x3c
 8000fb0:	7825      	ldrb	r5, [r4, #0]
{
 8000fb2:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8000fb4:	0010      	movs	r0, r2
 8000fb6:	2d01      	cmp	r5, #1
 8000fb8:	d022      	beq.n	8001000 <HAL_TIMEx_MasterConfigSynchronization+0x58>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000fba:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8000fbc:	2670      	movs	r6, #112	; 0x70
  tmpcr2 = htim->Instance->CR2;
 8000fbe:	681b      	ldr	r3, [r3, #0]
  __HAL_LOCK(htim);
 8000fc0:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000fc2:	353d      	adds	r5, #61	; 0x3d
  __HAL_LOCK(htim);
 8000fc4:	7020      	strb	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000fc6:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8000fc8:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8000fca:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8000fcc:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000fce:	680e      	ldr	r6, [r1, #0]
 8000fd0:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8000fd2:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000fd4:	480b      	ldr	r0, [pc, #44]	; (8001004 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8000fd6:	4283      	cmp	r3, r0
 8000fd8:	d009      	beq.n	8000fee <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8000fda:	2080      	movs	r0, #128	; 0x80
 8000fdc:	05c0      	lsls	r0, r0, #23
 8000fde:	4283      	cmp	r3, r0
 8000fe0:	d005      	beq.n	8000fee <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8000fe2:	4809      	ldr	r0, [pc, #36]	; (8001008 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8000fe4:	4283      	cmp	r3, r0
 8000fe6:	d002      	beq.n	8000fee <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8000fe8:	4808      	ldr	r0, [pc, #32]	; (800100c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8000fea:	4283      	cmp	r3, r0
 8000fec:	d104      	bne.n	8000ff8 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8000fee:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000ff0:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8000ff2:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000ff4:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8000ff6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8000ff8:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8000ffa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000ffc:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8000ffe:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001000:	bd70      	pop	{r4, r5, r6, pc}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	40012c00 	.word	0x40012c00
 8001008:	40000400 	.word	0x40000400
 800100c:	40014000 	.word	0x40014000

08001010 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001010:	b570      	push	{r4, r5, r6, lr}
 8001012:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001014:	6925      	ldr	r5, [r4, #16]
 8001016:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001018:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800101a:	432a      	orrs	r2, r5
 800101c:	6965      	ldr	r5, [r4, #20]
 800101e:	69c1      	ldr	r1, [r0, #28]
 8001020:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001022:	6818      	ldr	r0, [r3, #0]
 8001024:	4d53      	ldr	r5, [pc, #332]	; (8001174 <UART_SetConfig+0x164>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001026:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001028:	4028      	ands	r0, r5
 800102a:	4302      	orrs	r2, r0
 800102c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	4851      	ldr	r0, [pc, #324]	; (8001178 <UART_SetConfig+0x168>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8001032:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001034:	4002      	ands	r2, r0
 8001036:	68e0      	ldr	r0, [r4, #12]
 8001038:	4302      	orrs	r2, r0
 800103a:	605a      	str	r2, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 800103c:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800103e:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001040:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001042:	4d4e      	ldr	r5, [pc, #312]	; (800117c <UART_SetConfig+0x16c>)
 8001044:	4028      	ands	r0, r5
 8001046:	4302      	orrs	r2, r0
 8001048:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800104a:	4a4d      	ldr	r2, [pc, #308]	; (8001180 <UART_SetConfig+0x170>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d113      	bne.n	8001078 <UART_SetConfig+0x68>
 8001050:	2203      	movs	r2, #3
 8001052:	4b4c      	ldr	r3, [pc, #304]	; (8001184 <UART_SetConfig+0x174>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4013      	ands	r3, r2
 8001058:	4a4b      	ldr	r2, [pc, #300]	; (8001188 <UART_SetConfig+0x178>)
 800105a:	5cd0      	ldrb	r0, [r2, r3]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	4299      	cmp	r1, r3
 8001062:	d100      	bne.n	8001066 <UART_SetConfig+0x56>
 8001064:	e07d      	b.n	8001162 <UART_SetConfig+0x152>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8001066:	2808      	cmp	r0, #8
 8001068:	d844      	bhi.n	80010f4 <UART_SetConfig+0xe4>
 800106a:	f7ff f857 	bl	800011c <__gnu_thumb1_case_uqi>
 800106e:	4375      	.short	0x4375
 8001070:	43554345 	.word	0x43554345
 8001074:	4343      	.short	0x4343
 8001076:	58          	.byte	0x58
 8001077:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001078:	4a44      	ldr	r2, [pc, #272]	; (800118c <UART_SetConfig+0x17c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d134      	bne.n	80010e8 <UART_SetConfig+0xd8>
 800107e:	20c0      	movs	r0, #192	; 0xc0
 8001080:	2580      	movs	r5, #128	; 0x80
 8001082:	2280      	movs	r2, #128	; 0x80
 8001084:	4b3f      	ldr	r3, [pc, #252]	; (8001184 <UART_SetConfig+0x174>)
 8001086:	0280      	lsls	r0, r0, #10
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	026d      	lsls	r5, r5, #9
 800108c:	4003      	ands	r3, r0
 800108e:	0212      	lsls	r2, r2, #8
 8001090:	42ab      	cmp	r3, r5
 8001092:	d053      	beq.n	800113c <UART_SetConfig+0x12c>
 8001094:	d805      	bhi.n	80010a2 <UART_SetConfig+0x92>
 8001096:	2b00      	cmp	r3, #0
 8001098:	d05c      	beq.n	8001154 <UART_SetConfig+0x144>
      ret = HAL_ERROR;
 800109a:	2001      	movs	r0, #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800109c:	4291      	cmp	r1, r2
 800109e:	d129      	bne.n	80010f4 <UART_SetConfig+0xe4>
 80010a0:	e01e      	b.n	80010e0 <UART_SetConfig+0xd0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80010a2:	2580      	movs	r5, #128	; 0x80
 80010a4:	02ad      	lsls	r5, r5, #10
 80010a6:	42ab      	cmp	r3, r5
 80010a8:	d04d      	beq.n	8001146 <UART_SetConfig+0x136>
 80010aa:	4283      	cmp	r3, r0
 80010ac:	d1f5      	bne.n	800109a <UART_SetConfig+0x8a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010ae:	4291      	cmp	r1, r2
 80010b0:	d122      	bne.n	80010f8 <UART_SetConfig+0xe8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80010b2:	6863      	ldr	r3, [r4, #4]
 80010b4:	0858      	lsrs	r0, r3, #1
 80010b6:	4b36      	ldr	r3, [pc, #216]	; (8001190 <UART_SetConfig+0x180>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80010b8:	18c0      	adds	r0, r0, r3
 80010ba:	6861      	ldr	r1, [r4, #4]
 80010bc:	f7ff f838 	bl	8000130 <__udivsi3>
 80010c0:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80010c2:	0003      	movs	r3, r0
 80010c4:	4a33      	ldr	r2, [pc, #204]	; (8001194 <UART_SetConfig+0x184>)
 80010c6:	3b10      	subs	r3, #16
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d813      	bhi.n	80010f4 <UART_SetConfig+0xe4>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80010cc:	230f      	movs	r3, #15
 80010ce:	0002      	movs	r2, r0
 80010d0:	439a      	bics	r2, r3
 80010d2:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80010d4:	0700      	lsls	r0, r0, #28
      huart->Instance->BRR = brrtemp;
 80010d6:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80010d8:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 80010da:	4318      	orrs	r0, r3
 80010dc:	60d0      	str	r0, [r2, #12]
 80010de:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80010e4:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80010e6:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80010e8:	4a2b      	ldr	r2, [pc, #172]	; (8001198 <UART_SetConfig+0x188>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d01c      	beq.n	8001128 <UART_SetConfig+0x118>
 80010ee:	4a2b      	ldr	r2, [pc, #172]	; (800119c <UART_SetConfig+0x18c>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d019      	beq.n	8001128 <UART_SetConfig+0x118>
      ret = HAL_ERROR;
 80010f4:	2001      	movs	r0, #1
 80010f6:	e7f3      	b.n	80010e0 <UART_SetConfig+0xd0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80010f8:	6863      	ldr	r3, [r4, #4]
 80010fa:	0858      	lsrs	r0, r3, #1
 80010fc:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <UART_SetConfig+0x190>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80010fe:	18c0      	adds	r0, r0, r3
 8001100:	6861      	ldr	r1, [r4, #4]
 8001102:	f7ff f815 	bl	8000130 <__udivsi3>
 8001106:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001108:	0003      	movs	r3, r0
 800110a:	4a22      	ldr	r2, [pc, #136]	; (8001194 <UART_SetConfig+0x184>)
 800110c:	3b10      	subs	r3, #16
 800110e:	4293      	cmp	r3, r2
 8001110:	d8f0      	bhi.n	80010f4 <UART_SetConfig+0xe4>
      huart->Instance->BRR = usartdiv;
 8001112:	6823      	ldr	r3, [r4, #0]
 8001114:	60d8      	str	r0, [r3, #12]
 8001116:	e7e2      	b.n	80010de <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8001118:	f7ff fc62 	bl	80009e0 <HAL_RCC_GetSysClockFreq>
 800111c:	e01e      	b.n	800115c <UART_SetConfig+0x14c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800111e:	6863      	ldr	r3, [r4, #4]
 8001120:	0858      	lsrs	r0, r3, #1
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	e7ea      	b.n	80010fe <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	4299      	cmp	r1, r3
 800112e:	d113      	bne.n	8001158 <UART_SetConfig+0x148>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001130:	f7ff fd1e 	bl	8000b70 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001134:	6863      	ldr	r3, [r4, #4]
 8001136:	0040      	lsls	r0, r0, #1
 8001138:	085b      	lsrs	r3, r3, #1
 800113a:	e7bd      	b.n	80010b8 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800113c:	4291      	cmp	r1, r2
 800113e:	d1eb      	bne.n	8001118 <UART_SetConfig+0x108>
        pclk = HAL_RCC_GetSysClockFreq();
 8001140:	f7ff fc4e 	bl	80009e0 <HAL_RCC_GetSysClockFreq>
 8001144:	e7f6      	b.n	8001134 <UART_SetConfig+0x124>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001146:	4291      	cmp	r1, r2
 8001148:	d1e9      	bne.n	800111e <UART_SetConfig+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800114a:	6863      	ldr	r3, [r4, #4]
 800114c:	0858      	lsrs	r0, r3, #1
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	025b      	lsls	r3, r3, #9
 8001152:	e7b1      	b.n	80010b8 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001154:	4291      	cmp	r1, r2
 8001156:	d0eb      	beq.n	8001130 <UART_SetConfig+0x120>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001158:	f7ff fd0a 	bl	8000b70 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800115c:	6863      	ldr	r3, [r4, #4]
 800115e:	085b      	lsrs	r3, r3, #1
 8001160:	e7cd      	b.n	80010fe <UART_SetConfig+0xee>
    switch (clocksource)
 8001162:	2808      	cmp	r0, #8
 8001164:	d8c6      	bhi.n	80010f4 <UART_SetConfig+0xe4>
 8001166:	f7fe ffcf 	bl	8000108 <__gnu_thumb1_case_sqi>
 800116a:	c5e3      	.short	0xc5e3
 800116c:	c5ebc5a4 	.word	0xc5ebc5a4
 8001170:	c5c5      	.short	0xc5c5
 8001172:	f0          	.byte	0xf0
 8001173:	00          	.byte	0x00
 8001174:	efff69f3 	.word	0xefff69f3
 8001178:	ffffcfff 	.word	0xffffcfff
 800117c:	fffff4ff 	.word	0xfffff4ff
 8001180:	40013800 	.word	0x40013800
 8001184:	40021000 	.word	0x40021000
 8001188:	08002498 	.word	0x08002498
 800118c:	40004400 	.word	0x40004400
 8001190:	00f42400 	.word	0x00f42400
 8001194:	0000ffef 	.word	0x0000ffef
 8001198:	40004800 	.word	0x40004800
 800119c:	40004c00 	.word	0x40004c00
 80011a0:	007a1200 	.word	0x007a1200

080011a4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80011a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80011a6:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80011a8:	07da      	lsls	r2, r3, #31
 80011aa:	d506      	bpl.n	80011ba <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80011ac:	6801      	ldr	r1, [r0, #0]
 80011ae:	4c28      	ldr	r4, [pc, #160]	; (8001250 <UART_AdvFeatureConfig+0xac>)
 80011b0:	684a      	ldr	r2, [r1, #4]
 80011b2:	4022      	ands	r2, r4
 80011b4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80011b6:	4322      	orrs	r2, r4
 80011b8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80011ba:	079a      	lsls	r2, r3, #30
 80011bc:	d506      	bpl.n	80011cc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80011be:	6801      	ldr	r1, [r0, #0]
 80011c0:	4c24      	ldr	r4, [pc, #144]	; (8001254 <UART_AdvFeatureConfig+0xb0>)
 80011c2:	684a      	ldr	r2, [r1, #4]
 80011c4:	4022      	ands	r2, r4
 80011c6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80011c8:	4322      	orrs	r2, r4
 80011ca:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80011cc:	075a      	lsls	r2, r3, #29
 80011ce:	d506      	bpl.n	80011de <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80011d0:	6801      	ldr	r1, [r0, #0]
 80011d2:	4c21      	ldr	r4, [pc, #132]	; (8001258 <UART_AdvFeatureConfig+0xb4>)
 80011d4:	684a      	ldr	r2, [r1, #4]
 80011d6:	4022      	ands	r2, r4
 80011d8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80011da:	4322      	orrs	r2, r4
 80011dc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80011de:	071a      	lsls	r2, r3, #28
 80011e0:	d506      	bpl.n	80011f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80011e2:	6801      	ldr	r1, [r0, #0]
 80011e4:	4c1d      	ldr	r4, [pc, #116]	; (800125c <UART_AdvFeatureConfig+0xb8>)
 80011e6:	684a      	ldr	r2, [r1, #4]
 80011e8:	4022      	ands	r2, r4
 80011ea:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80011ec:	4322      	orrs	r2, r4
 80011ee:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80011f0:	06da      	lsls	r2, r3, #27
 80011f2:	d506      	bpl.n	8001202 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80011f4:	6801      	ldr	r1, [r0, #0]
 80011f6:	4c1a      	ldr	r4, [pc, #104]	; (8001260 <UART_AdvFeatureConfig+0xbc>)
 80011f8:	688a      	ldr	r2, [r1, #8]
 80011fa:	4022      	ands	r2, r4
 80011fc:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80011fe:	4322      	orrs	r2, r4
 8001200:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001202:	069a      	lsls	r2, r3, #26
 8001204:	d506      	bpl.n	8001214 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001206:	6801      	ldr	r1, [r0, #0]
 8001208:	4c16      	ldr	r4, [pc, #88]	; (8001264 <UART_AdvFeatureConfig+0xc0>)
 800120a:	688a      	ldr	r2, [r1, #8]
 800120c:	4022      	ands	r2, r4
 800120e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001210:	4322      	orrs	r2, r4
 8001212:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001214:	065a      	lsls	r2, r3, #25
 8001216:	d510      	bpl.n	800123a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001218:	6801      	ldr	r1, [r0, #0]
 800121a:	4d13      	ldr	r5, [pc, #76]	; (8001268 <UART_AdvFeatureConfig+0xc4>)
 800121c:	684a      	ldr	r2, [r1, #4]
 800121e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001220:	402a      	ands	r2, r5
 8001222:	4322      	orrs	r2, r4
 8001224:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001226:	2280      	movs	r2, #128	; 0x80
 8001228:	0352      	lsls	r2, r2, #13
 800122a:	4294      	cmp	r4, r2
 800122c:	d105      	bne.n	800123a <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800122e:	684a      	ldr	r2, [r1, #4]
 8001230:	4c0e      	ldr	r4, [pc, #56]	; (800126c <UART_AdvFeatureConfig+0xc8>)
 8001232:	4022      	ands	r2, r4
 8001234:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001236:	4322      	orrs	r2, r4
 8001238:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800123a:	061b      	lsls	r3, r3, #24
 800123c:	d506      	bpl.n	800124c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800123e:	6802      	ldr	r2, [r0, #0]
 8001240:	490b      	ldr	r1, [pc, #44]	; (8001270 <UART_AdvFeatureConfig+0xcc>)
 8001242:	6853      	ldr	r3, [r2, #4]
 8001244:	400b      	ands	r3, r1
 8001246:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001248:	430b      	orrs	r3, r1
 800124a:	6053      	str	r3, [r2, #4]
  }
}
 800124c:	bd30      	pop	{r4, r5, pc}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	fffdffff 	.word	0xfffdffff
 8001254:	fffeffff 	.word	0xfffeffff
 8001258:	fffbffff 	.word	0xfffbffff
 800125c:	ffff7fff 	.word	0xffff7fff
 8001260:	ffffefff 	.word	0xffffefff
 8001264:	ffffdfff 	.word	0xffffdfff
 8001268:	ffefffff 	.word	0xffefffff
 800126c:	ff9fffff 	.word	0xff9fffff
 8001270:	fff7ffff 	.word	0xfff7ffff

08001274 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001276:	2780      	movs	r7, #128	; 0x80
{
 8001278:	0004      	movs	r4, r0
 800127a:	000e      	movs	r6, r1
 800127c:	0015      	movs	r5, r2
 800127e:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001280:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001282:	6822      	ldr	r2, [r4, #0]
 8001284:	69d3      	ldr	r3, [r2, #28]
 8001286:	4033      	ands	r3, r6
 8001288:	1b9b      	subs	r3, r3, r6
 800128a:	4259      	negs	r1, r3
 800128c:	414b      	adcs	r3, r1
 800128e:	42ab      	cmp	r3, r5
 8001290:	d001      	beq.n	8001296 <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8001292:	2000      	movs	r0, #0
 8001294:	e01c      	b.n	80012d0 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8001296:	9b08      	ldr	r3, [sp, #32]
 8001298:	3301      	adds	r3, #1
 800129a:	d0f3      	beq.n	8001284 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800129c:	f7ff f814 	bl	80002c8 <HAL_GetTick>
 80012a0:	9b01      	ldr	r3, [sp, #4]
 80012a2:	9a08      	ldr	r2, [sp, #32]
 80012a4:	1ac0      	subs	r0, r0, r3
 80012a6:	6823      	ldr	r3, [r4, #0]
 80012a8:	4282      	cmp	r2, r0
 80012aa:	d301      	bcc.n	80012b0 <UART_WaitOnFlagUntilTimeout+0x3c>
 80012ac:	2a00      	cmp	r2, #0
 80012ae:	d110      	bne.n	80012d2 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	4913      	ldr	r1, [pc, #76]	; (8001300 <UART_WaitOnFlagUntilTimeout+0x8c>)
 80012b4:	400a      	ands	r2, r1
 80012b6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	31a3      	adds	r1, #163	; 0xa3
 80012bc:	31ff      	adds	r1, #255	; 0xff
 80012be:	438a      	bics	r2, r1
 80012c0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80012c2:	2320      	movs	r3, #32
 80012c4:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80012c6:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 80012c8:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80012ca:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80012cc:	3470      	adds	r4, #112	; 0x70
 80012ce:	7023      	strb	r3, [r4, #0]
}
 80012d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80012d2:	2104      	movs	r1, #4
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	420a      	tst	r2, r1
 80012d8:	d0d3      	beq.n	8001282 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80012da:	69da      	ldr	r2, [r3, #28]
 80012dc:	423a      	tst	r2, r7
 80012de:	d0d0      	beq.n	8001282 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80012e0:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4906      	ldr	r1, [pc, #24]	; (8001300 <UART_WaitOnFlagUntilTimeout+0x8c>)
 80012e6:	400a      	ands	r2, r1
 80012e8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	31a3      	adds	r1, #163	; 0xa3
 80012ee:	31ff      	adds	r1, #255	; 0xff
 80012f0:	438a      	bics	r2, r1
 80012f2:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 80012f4:	2320      	movs	r3, #32
 80012f6:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80012f8:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80012fa:	67e3      	str	r3, [r4, #124]	; 0x7c
 80012fc:	e7e4      	b.n	80012c8 <UART_WaitOnFlagUntilTimeout+0x54>
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	fffffe5f 	.word	0xfffffe5f

08001304 <HAL_UART_Transmit>:
{
 8001304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001306:	b087      	sub	sp, #28
 8001308:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 800130a:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800130c:	0004      	movs	r4, r0
 800130e:	000d      	movs	r5, r1
 8001310:	0017      	movs	r7, r2
    return HAL_BUSY;
 8001312:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8001314:	2b20      	cmp	r3, #32
 8001316:	d149      	bne.n	80013ac <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 8001318:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800131a:	2900      	cmp	r1, #0
 800131c:	d046      	beq.n	80013ac <HAL_UART_Transmit+0xa8>
 800131e:	2a00      	cmp	r2, #0
 8001320:	d044      	beq.n	80013ac <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	68a2      	ldr	r2, [r4, #8]
 8001326:	015b      	lsls	r3, r3, #5
 8001328:	429a      	cmp	r2, r3
 800132a:	d104      	bne.n	8001336 <HAL_UART_Transmit+0x32>
 800132c:	6923      	ldr	r3, [r4, #16]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8001332:	4201      	tst	r1, r0
 8001334:	d13a      	bne.n	80013ac <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8001336:	0023      	movs	r3, r4
 8001338:	3370      	adds	r3, #112	; 0x70
 800133a:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 800133c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800133e:	2a01      	cmp	r2, #1
 8001340:	d034      	beq.n	80013ac <HAL_UART_Transmit+0xa8>
 8001342:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001344:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 8001346:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001348:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800134a:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800134c:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 800134e:	f7fe ffbb 	bl	80002c8 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8001352:	0023      	movs	r3, r4
 8001354:	3350      	adds	r3, #80	; 0x50
 8001356:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8001358:	3302      	adds	r3, #2
 800135a:	9303      	str	r3, [sp, #12]
 800135c:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001362:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001364:	015b      	lsls	r3, r3, #5
 8001366:	429a      	cmp	r2, r3
 8001368:	d104      	bne.n	8001374 <HAL_UART_Transmit+0x70>
 800136a:	6923      	ldr	r3, [r4, #16]
 800136c:	42b3      	cmp	r3, r6
 800136e:	d101      	bne.n	8001374 <HAL_UART_Transmit+0x70>
 8001370:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8001372:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8001374:	0023      	movs	r3, r4
 8001376:	3352      	adds	r3, #82	; 0x52
 8001378:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800137a:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 800137c:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 8001382:	2a00      	cmp	r2, #0
 8001384:	d10a      	bne.n	800139c <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001386:	2140      	movs	r1, #64	; 0x40
 8001388:	0020      	movs	r0, r4
 800138a:	f7ff ff73 	bl	8001274 <UART_WaitOnFlagUntilTimeout>
 800138e:	2800      	cmp	r0, #0
 8001390:	d10b      	bne.n	80013aa <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 8001392:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001394:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 8001396:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 8001398:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800139a:	e007      	b.n	80013ac <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800139c:	2200      	movs	r2, #0
 800139e:	2180      	movs	r1, #128	; 0x80
 80013a0:	0020      	movs	r0, r4
 80013a2:	f7ff ff67 	bl	8001274 <UART_WaitOnFlagUntilTimeout>
 80013a6:	2800      	cmp	r0, #0
 80013a8:	d002      	beq.n	80013b0 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 80013aa:	2003      	movs	r0, #3
}
 80013ac:	b007      	add	sp, #28
 80013ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b0:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80013b2:	2d00      	cmp	r5, #0
 80013b4:	d10b      	bne.n	80013ce <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80013b6:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80013b8:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80013ba:	05db      	lsls	r3, r3, #23
 80013bc:	0ddb      	lsrs	r3, r3, #23
 80013be:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80013c0:	9b03      	ldr	r3, [sp, #12]
 80013c2:	9a03      	ldr	r2, [sp, #12]
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	8013      	strh	r3, [r2, #0]
 80013cc:	e7d2      	b.n	8001374 <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80013ce:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80013d0:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80013d2:	8513      	strh	r3, [r2, #40]	; 0x28
 80013d4:	e7f4      	b.n	80013c0 <HAL_UART_Transmit+0xbc>
	...

080013d8 <UART_CheckIdleState>:
{
 80013d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013da:	2600      	movs	r6, #0
{
 80013dc:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013de:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80013e0:	f7fe ff72 	bl	80002c8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80013e4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80013e6:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	071b      	lsls	r3, r3, #28
 80013ec:	d415      	bmi.n	800141a <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80013ee:	6823      	ldr	r3, [r4, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	075b      	lsls	r3, r3, #29
 80013f4:	d50a      	bpl.n	800140c <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80013f6:	2180      	movs	r1, #128	; 0x80
 80013f8:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <UART_CheckIdleState+0x5c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	03c9      	lsls	r1, r1, #15
 8001400:	002b      	movs	r3, r5
 8001402:	0020      	movs	r0, r4
 8001404:	f7ff ff36 	bl	8001274 <UART_WaitOnFlagUntilTimeout>
 8001408:	2800      	cmp	r0, #0
 800140a:	d111      	bne.n	8001430 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800140c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800140e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001410:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001412:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001414:	3470      	adds	r4, #112	; 0x70
 8001416:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8001418:	e00b      	b.n	8001432 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800141a:	2180      	movs	r1, #128	; 0x80
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <UART_CheckIdleState+0x5c>)
 800141e:	0032      	movs	r2, r6
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	0389      	lsls	r1, r1, #14
 8001424:	0003      	movs	r3, r0
 8001426:	0020      	movs	r0, r4
 8001428:	f7ff ff24 	bl	8001274 <UART_WaitOnFlagUntilTimeout>
 800142c:	2800      	cmp	r0, #0
 800142e:	d0de      	beq.n	80013ee <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001430:	2003      	movs	r0, #3
}
 8001432:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001434:	01ffffff 	.word	0x01ffffff

08001438 <HAL_UART_Init>:
{
 8001438:	b510      	push	{r4, lr}
 800143a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800143c:	d101      	bne.n	8001442 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800143e:	2001      	movs	r0, #1
}
 8001440:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001442:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001444:	2b00      	cmp	r3, #0
 8001446:	d104      	bne.n	8001452 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8001448:	0002      	movs	r2, r0
 800144a:	3270      	adds	r2, #112	; 0x70
 800144c:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800144e:	f000 fa87 	bl	8001960 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001452:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001454:	2101      	movs	r1, #1
 8001456:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001458:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800145a:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800145c:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800145e:	438b      	bics	r3, r1
 8001460:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001462:	f7ff fdd5 	bl	8001010 <UART_SetConfig>
 8001466:	2801      	cmp	r0, #1
 8001468:	d0e9      	beq.n	800143e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800146a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8001470:	0020      	movs	r0, r4
 8001472:	f7ff fe97 	bl	80011a4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001476:	6823      	ldr	r3, [r4, #0]
 8001478:	4907      	ldr	r1, [pc, #28]	; (8001498 <HAL_UART_Init+0x60>)
 800147a:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800147c:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800147e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001480:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001482:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	438a      	bics	r2, r1
 8001488:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800148a:	2201      	movs	r2, #1
 800148c:	6819      	ldr	r1, [r3, #0]
 800148e:	430a      	orrs	r2, r1
 8001490:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001492:	f7ff ffa1 	bl	80013d8 <UART_CheckIdleState>
 8001496:	e7d3      	b.n	8001440 <HAL_UART_Init+0x8>
 8001498:	ffffb7ff 	.word	0xffffb7ff

0800149c <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 800149c:	b513      	push	{r0, r1, r4, lr}
 800149e:	0004      	movs	r4, r0
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 80014a0:	a901      	add	r1, sp, #4
 80014a2:	7008      	strb	r0, [r1, #0]
 HAL_UART_Transmit(&huart2, &*c, 1, 10);
 80014a4:	230a      	movs	r3, #10
 80014a6:	2201      	movs	r2, #1
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <__io_putchar+0x18>)
 80014aa:	f7ff ff2b 	bl	8001304 <HAL_UART_Transmit>
 return ch;
}
 80014ae:	0020      	movs	r0, r4
 80014b0:	bd16      	pop	{r1, r2, r4, pc}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	200001f4 	.word	0x200001f4

080014b8 <_write>:

int _write(int file,char *ptr, int len)
{
 80014b8:	b570      	push	{r4, r5, r6, lr}
 80014ba:	000e      	movs	r6, r1
 80014bc:	0015      	movs	r5, r2
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 80014be:	000c      	movs	r4, r1
 80014c0:	1ba3      	subs	r3, r4, r6
 80014c2:	429d      	cmp	r5, r3
 80014c4:	dc01      	bgt.n	80014ca <_write+0x12>
 {
 __io_putchar(*ptr++);
 }
return len;
}
 80014c6:	0028      	movs	r0, r5
 80014c8:	bd70      	pop	{r4, r5, r6, pc}
 __io_putchar(*ptr++);
 80014ca:	7820      	ldrb	r0, [r4, #0]
 80014cc:	f7ff ffe6 	bl	800149c <__io_putchar>
 80014d0:	3401      	adds	r4, #1
 80014d2:	e7f5      	b.n	80014c0 <_write+0x8>

080014d4 <HAL_GPIO_EXTI_Callback>:

/* Interrupts ---------------------------------------------------------------*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80014d4:	b510      	push	{r4, lr}

	(data & (0x800000>>cnt++)) ? HAL_GPIO_WritePin(LIR_DATA_GPIO_Port, LIR_DATA_Pin, GPIO_PIN_SET) : HAL_GPIO_WritePin(LIR_DATA_GPIO_Port, LIR_DATA_Pin, GPIO_PIN_RESET);
 80014d6:	4c0e      	ldr	r4, [pc, #56]	; (8001510 <HAL_GPIO_EXTI_Callback+0x3c>)
 80014d8:	6823      	ldr	r3, [r4, #0]
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	6022      	str	r2, [r4, #0]
 80014de:	2280      	movs	r2, #128	; 0x80
 80014e0:	0412      	lsls	r2, r2, #16
 80014e2:	411a      	asrs	r2, r3
 80014e4:	0013      	movs	r3, r2
 80014e6:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <HAL_GPIO_EXTI_Callback+0x40>)
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	401a      	ands	r2, r3
 80014ec:	d000      	beq.n	80014f0 <HAL_GPIO_EXTI_Callback+0x1c>
 80014ee:	2201      	movs	r2, #1
 80014f0:	2140      	movs	r1, #64	; 0x40
 80014f2:	4809      	ldr	r0, [pc, #36]	; (8001518 <HAL_GPIO_EXTI_Callback+0x44>)
 80014f4:	f7ff f812 	bl	800051c <HAL_GPIO_WritePin>
	if(cnt==25)
 80014f8:	6823      	ldr	r3, [r4, #0]
 80014fa:	2b19      	cmp	r3, #25
 80014fc:	d106      	bne.n	800150c <HAL_GPIO_EXTI_Callback+0x38>
	{
		HAL_GPIO_WritePin(LIR_DATA_GPIO_Port, LIR_DATA_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	2140      	movs	r1, #64	; 0x40
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <HAL_GPIO_EXTI_Callback+0x44>)
 8001504:	f7ff f80a 	bl	800051c <HAL_GPIO_WritePin>
		cnt=0;
 8001508:	2300      	movs	r3, #0
 800150a:	6023      	str	r3, [r4, #0]
	//MSB
//	if(cnt==0) { cnt=24;  HAL_GPIO_WritePin(LIR_DATA_GPIO_Port, LIR_DATA_Pin, GPIO_PIN_RESET); }
//	if(cnt<24) (data & (0x01<<cnt)) ? HAL_GPIO_WritePin(LIR_DATA_GPIO_Port, LIR_DATA_Pin, GPIO_PIN_SET) : HAL_GPIO_WritePin(LIR_DATA_GPIO_Port, LIR_DATA_Pin, GPIO_PIN_RESET);
//	if(cnt) cnt--;

}
 800150c:	bd10      	pop	{r4, pc}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	20000090 	.word	0x20000090
 8001514:	20000008 	.word	0x20000008
 8001518:	48000800 	.word	0x48000800

0800151c <tick_lir24>:

void tick_lir24()
{
	for(int c=0; c<=24; c++)
	{
	  FAKE_GPIO_Port->BRR = (uint32_t)FAKE_Pin;
 800151c:	2190      	movs	r1, #144	; 0x90
 800151e:	2080      	movs	r0, #128	; 0x80
{
 8001520:	b570      	push	{r4, r5, r6, lr}
 8001522:	2219      	movs	r2, #25
	  counter = 16;
 8001524:	2410      	movs	r4, #16
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <tick_lir24+0x34>)
	  FAKE_GPIO_Port->BRR = (uint32_t)FAKE_Pin;
 8001528:	05c9      	lsls	r1, r1, #23
 800152a:	0100      	lsls	r0, r0, #4
 800152c:	6288      	str	r0, [r1, #40]	; 0x28
	  counter = 16;
 800152e:	601c      	str	r4, [r3, #0]
	  while(counter--);
 8001530:	681d      	ldr	r5, [r3, #0]
 8001532:	1e6e      	subs	r6, r5, #1
 8001534:	601e      	str	r6, [r3, #0]
 8001536:	2d00      	cmp	r5, #0
 8001538:	d1fa      	bne.n	8001530 <tick_lir24+0x14>
	  FAKE_GPIO_Port->BSRR = (uint32_t)FAKE_Pin;
 800153a:	6188      	str	r0, [r1, #24]
	  counter = 16;
 800153c:	601c      	str	r4, [r3, #0]
	  while(counter--);
 800153e:	681d      	ldr	r5, [r3, #0]
 8001540:	1e6e      	subs	r6, r5, #1
 8001542:	601e      	str	r6, [r3, #0]
 8001544:	2d00      	cmp	r5, #0
 8001546:	d1fa      	bne.n	800153e <tick_lir24+0x22>
 8001548:	3a01      	subs	r2, #1
	for(int c=0; c<=24; c++)
 800154a:	2a00      	cmp	r2, #0
 800154c:	d1ee      	bne.n	800152c <tick_lir24+0x10>
	}

}
 800154e:	bd70      	pop	{r4, r5, r6, pc}
 8001550:	20000094 	.word	0x20000094

08001554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001554:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001556:	2510      	movs	r5, #16
{
 8001558:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155a:	2234      	movs	r2, #52	; 0x34
 800155c:	2100      	movs	r1, #0
 800155e:	a80b      	add	r0, sp, #44	; 0x2c
 8001560:	f000 facb 	bl	8001afa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001564:	002a      	movs	r2, r5
 8001566:	2100      	movs	r1, #0
 8001568:	4668      	mov	r0, sp
 800156a:	f000 fac6 	bl	8001afa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800156e:	221c      	movs	r2, #28
 8001570:	2100      	movs	r1, #0
 8001572:	a804      	add	r0, sp, #16
 8001574:	f000 fac1 	bl	8001afa <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800157e:	23c0      	movs	r3, #192	; 0xc0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001580:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001582:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001584:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001586:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001588:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800158a:	9316      	str	r3, [sp, #88]	; 0x58
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800158c:	2500      	movs	r5, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800158e:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001590:	960e      	str	r6, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001592:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8001594:	9617      	str	r6, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001596:	f7fe ffd3 	bl	8000540 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800159a:	2307      	movs	r3, #7
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800159c:	0031      	movs	r1, r6
 800159e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a0:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a2:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a4:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015a6:	9503      	str	r5, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015a8:	f7ff fa56 	bl	8000a58 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ac:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015ae:	9404      	str	r4, [sp, #16]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015b0:	9507      	str	r5, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015b2:	f7ff faed 	bl	8000b90 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80015b6:	b018      	add	sp, #96	; 0x60
 80015b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080015bc <main>:
{
 80015bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015be:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 80015c0:	f7fe fe66 	bl	8000290 <HAL_Init>
  SystemClock_Config();
 80015c4:	f7ff ffc6 	bl	8001554 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	2214      	movs	r2, #20
 80015ca:	2100      	movs	r1, #0
 80015cc:	a807      	add	r0, sp, #28
 80015ce:	f000 fa94 	bl	8001afa <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d2:	2080      	movs	r0, #128	; 0x80
 80015d4:	4b8a      	ldr	r3, [pc, #552]	; (8001800 <main+0x244>)
 80015d6:	0300      	lsls	r0, r0, #12
 80015d8:	6959      	ldr	r1, [r3, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80015da:	2680      	movs	r6, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015dc:	4301      	orrs	r1, r0
 80015de:	6159      	str	r1, [r3, #20]
 80015e0:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80015e2:	0076      	lsls	r6, r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e4:	4002      	ands	r2, r0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015e6:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e8:	9201      	str	r2, [sp, #4]
 80015ea:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015ec:	6959      	ldr	r1, [r3, #20]
 80015ee:	03c0      	lsls	r0, r0, #15
 80015f0:	4301      	orrs	r1, r0
 80015f2:	6159      	str	r1, [r3, #20]
 80015f4:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|TP_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CC1101_CS_Pin SD_CS_Pin TP_CS_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = CC1101_CS_Pin|SD_CS_Pin|TP_CS_Pin|LCD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015f8:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015fc:	9202      	str	r2, [sp, #8]
 80015fe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001600:	6959      	ldr	r1, [r3, #20]
 8001602:	0280      	lsls	r0, r0, #10
 8001604:	4301      	orrs	r1, r0
 8001606:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001608:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160c:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	4002      	ands	r2, r0
 8001610:	9203      	str	r2, [sp, #12]
 8001612:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001614:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(CC1101_CS_GPIO_Port, CC1101_CS_Pin, GPIO_PIN_SET);
 8001616:	487b      	ldr	r0, [pc, #492]	; (8001804 <main+0x248>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001618:	430a      	orrs	r2, r1
 800161a:	615a      	str	r2, [r3, #20]
 800161c:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(CC1101_CS_GPIO_Port, CC1101_CS_Pin, GPIO_PIN_SET);
 800161e:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001620:	400b      	ands	r3, r1
 8001622:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(CC1101_CS_GPIO_Port, CC1101_CS_Pin, GPIO_PIN_SET);
 8001624:	2102      	movs	r1, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(CC1101_CS_GPIO_Port, CC1101_CS_Pin, GPIO_PIN_SET);
 8001628:	f7fe ff78 	bl	800051c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LIR_DATA_GPIO_Port, LIR_DATA_Pin, GPIO_PIN_SET);
 800162c:	2201      	movs	r2, #1
 800162e:	2140      	movs	r1, #64	; 0x40
 8001630:	4875      	ldr	r0, [pc, #468]	; (8001808 <main+0x24c>)
 8001632:	f7fe ff73 	bl	800051c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	2180      	movs	r1, #128	; 0x80
 800163a:	4873      	ldr	r0, [pc, #460]	; (8001808 <main+0x24c>)
 800163c:	f7fe ff6e 	bl	800051c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001640:	2090      	movs	r0, #144	; 0x90
 8001642:	0031      	movs	r1, r6
 8001644:	2200      	movs	r2, #0
 8001646:	05c0      	lsls	r0, r0, #23
 8001648:	f7fe ff68 	bl	800051c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FAKE_GPIO_Port, FAKE_Pin, GPIO_PIN_SET);
 800164c:	2180      	movs	r1, #128	; 0x80
 800164e:	2090      	movs	r0, #144	; 0x90
 8001650:	2201      	movs	r2, #1
 8001652:	0109      	lsls	r1, r1, #4
 8001654:	05c0      	lsls	r0, r0, #23
 8001656:	f7fe ff61 	bl	800051c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|TP_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	2170      	movs	r1, #112	; 0x70
 800165e:	4869      	ldr	r0, [pc, #420]	; (8001804 <main+0x248>)
 8001660:	f7fe ff5c 	bl	800051c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001664:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = CC1101_CS_Pin|SD_CS_Pin|TP_CS_Pin|LCD_CS_Pin;
 8001666:	2372      	movs	r3, #114	; 0x72
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001668:	a907      	add	r1, sp, #28
 800166a:	4866      	ldr	r0, [pc, #408]	; (8001804 <main+0x248>)
  GPIO_InitStruct.Pin = CC1101_CS_Pin|SD_CS_Pin|TP_CS_Pin|LCD_CS_Pin;
 800166c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001674:	f7fe fe96 	bl	80003a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CC1101_GDO0_Pin TP_IRQ_Pin */
  GPIO_InitStruct.Pin = CC1101_GDO0_Pin|TP_IRQ_Pin;
 8001678:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167a:	a907      	add	r1, sp, #28
 800167c:	4861      	ldr	r0, [pc, #388]	; (8001804 <main+0x248>)
  GPIO_InitStruct.Pin = CC1101_GDO0_Pin|TP_IRQ_Pin;
 800167e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001680:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f7fe fe8e 	bl	80003a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIR_DATA_Pin LCD_BL_Pin */
  GPIO_InitStruct.Pin = LIR_DATA_Pin|LCD_BL_Pin;
 8001688:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168a:	a907      	add	r1, sp, #28
 800168c:	485e      	ldr	r0, [pc, #376]	; (8001808 <main+0x24c>)
  GPIO_InitStruct.Pin = LIR_DATA_Pin|LCD_BL_Pin;
 800168e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001690:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001696:	f7fe fe85 	bl	80003a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIR_SCK_Pin */
  GPIO_InitStruct.Pin = LIR_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800169a:	4b5c      	ldr	r3, [pc, #368]	; (800180c <main+0x250>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(LIR_SCK_GPIO_Port, &GPIO_InitStruct);
 800169c:	a907      	add	r1, sp, #28
 800169e:	485a      	ldr	r0, [pc, #360]	; (8001808 <main+0x24c>)
  GPIO_InitStruct.Pin = LIR_SCK_Pin;
 80016a0:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a2:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a4:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LIR_SCK_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f7fe fe7d 	bl	80003a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin FAKE_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|FAKE_Pin;
 80016aa:	2390      	movs	r3, #144	; 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ac:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = LCD_DC_Pin|FAKE_Pin;
 80016ae:	011b      	lsls	r3, r3, #4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	a907      	add	r1, sp, #28
 80016b2:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LCD_DC_Pin|FAKE_Pin;
 80016b4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016bc:	f7fe fe72 	bl	80003a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80016c0:	0022      	movs	r2, r4
 80016c2:	0021      	movs	r1, r4
 80016c4:	2007      	movs	r0, #7
 80016c6:	f7fe fe17 	bl	80002f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80016ca:	2007      	movs	r0, #7
 80016cc:	f7fe fe44 	bl	8000358 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 80016d0:	484f      	ldr	r0, [pc, #316]	; (8001810 <main+0x254>)
 80016d2:	4b50      	ldr	r3, [pc, #320]	; (8001814 <main+0x258>)
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016d4:	3ef8      	subs	r6, #248	; 0xf8
  hspi1.Instance = SPI1;
 80016d6:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016d8:	2382      	movs	r3, #130	; 0x82
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	6043      	str	r3, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016de:	23e0      	movs	r3, #224	; 0xe0
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	60c3      	str	r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 80016ea:	3bfa      	subs	r3, #250	; 0xfa
 80016ec:	3bff      	subs	r3, #255	; 0xff
 80016ee:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016f0:	6084      	str	r4, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016f2:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016f4:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016f6:	61c4      	str	r4, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016f8:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016fa:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016fc:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016fe:	6304      	str	r4, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001700:	6346      	str	r6, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001702:	f7ff fae5 	bl	8000cd0 <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001706:	2210      	movs	r2, #16
 8001708:	0021      	movs	r1, r4
 800170a:	a807      	add	r0, sp, #28
 800170c:	f000 f9f5 	bl	8001afa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001710:	0032      	movs	r2, r6
 8001712:	0021      	movs	r1, r4
 8001714:	a805      	add	r0, sp, #20
 8001716:	f000 f9f0 	bl	8001afa <memset>
  htim3.Instance = TIM3;
 800171a:	4d3f      	ldr	r5, [pc, #252]	; (8001818 <main+0x25c>)
 800171c:	4b3f      	ldr	r3, [pc, #252]	; (800181c <main+0x260>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171e:	2780      	movs	r7, #128	; 0x80
  htim3.Instance = TIM3;
 8001720:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 48;
 8001722:	2330      	movs	r3, #48	; 0x30
 8001724:	606b      	str	r3, [r5, #4]
  htim3.Init.Period = 999;
 8001726:	4b3e      	ldr	r3, [pc, #248]	; (8001820 <main+0x264>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001728:	0028      	movs	r0, r5
  htim3.Init.Period = 999;
 800172a:	60eb      	str	r3, [r5, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172c:	60ac      	str	r4, [r5, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172e:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001730:	61ac      	str	r4, [r5, #24]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001732:	017f      	lsls	r7, r7, #5
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001734:	f7ff fb7a 	bl	8000e2c <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001738:	a907      	add	r1, sp, #28
 800173a:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800173c:	9707      	str	r7, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800173e:	f7ff fb9d 	bl	8000e7c <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001742:	a905      	add	r1, sp, #20
 8001744:	0028      	movs	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001746:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001748:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800174a:	f7ff fc2d 	bl	8000fa8 <HAL_TIMEx_MasterConfigSynchronization>
  huart2.Instance = USART2;
 800174e:	4835      	ldr	r0, [pc, #212]	; (8001824 <main+0x268>)
 8001750:	4b35      	ldr	r3, [pc, #212]	; (8001828 <main+0x26c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001752:	6084      	str	r4, [r0, #8]
  huart2.Instance = USART2;
 8001754:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001756:	23e1      	movs	r3, #225	; 0xe1
 8001758:	025b      	lsls	r3, r3, #9
 800175a:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800175c:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800175e:	60c4      	str	r4, [r0, #12]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001760:	6143      	str	r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001762:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001764:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001766:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001768:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800176a:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800176c:	f7ff fe64 	bl	8001438 <HAL_UART_Init>
  hspi2.Instance = SPI2;
 8001770:	482e      	ldr	r0, [pc, #184]	; (800182c <main+0x270>)
 8001772:	4b2f      	ldr	r3, [pc, #188]	; (8001830 <main+0x274>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001774:	6084      	str	r4, [r0, #8]
  hspi2.Instance = SPI2;
 8001776:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001778:	2382      	movs	r3, #130	; 0x82
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	6043      	str	r3, [r0, #4]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800177e:	23e0      	movs	r3, #224	; 0xe0
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	60c3      	str	r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800178a:	3be9      	subs	r3, #233	; 0xe9
 800178c:	3bff      	subs	r3, #255	; 0xff
 800178e:	61c3      	str	r3, [r0, #28]
  hspi2.Init.CRCPolynomial = 7;
 8001790:	3b11      	subs	r3, #17
 8001792:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001794:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001796:	6144      	str	r4, [r0, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001798:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800179a:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800179c:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800179e:	6304      	str	r4, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80017a0:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017a2:	f7ff fa95 	bl	8000cd0 <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a6:	2210      	movs	r2, #16
 80017a8:	0021      	movs	r1, r4
 80017aa:	a807      	add	r0, sp, #28
 80017ac:	f000 f9a5 	bl	8001afa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b0:	0032      	movs	r2, r6
 80017b2:	0021      	movs	r1, r4
 80017b4:	a805      	add	r0, sp, #20
 80017b6:	f000 f9a0 	bl	8001afa <memset>
  htim1.Instance = TIM1;
 80017ba:	4d1e      	ldr	r5, [pc, #120]	; (8001834 <main+0x278>)
 80017bc:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <main+0x27c>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017be:	0028      	movs	r0, r5
  htim1.Instance = TIM1;
 80017c0:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 32;
 80017c2:	2320      	movs	r3, #32
 80017c4:	606b      	str	r3, [r5, #4]
  htim1.Init.Period = 100-1;
 80017c6:	3343      	adds	r3, #67	; 0x43
 80017c8:	60eb      	str	r3, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ca:	60ac      	str	r4, [r5, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017cc:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 80017ce:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d0:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017d2:	f7ff fb2b 	bl	8000e2c <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017d6:	a907      	add	r1, sp, #28
 80017d8:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017da:	9707      	str	r7, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017dc:	f7ff fb4e 	bl	8000e7c <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017e0:	a905      	add	r1, sp, #20
 80017e2:	0028      	movs	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e4:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e6:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017e8:	f7ff fbde 	bl	8000fa8 <HAL_TIMEx_MasterConfigSynchronization>
  printf("Start\r\n");
 80017ec:	4813      	ldr	r0, [pc, #76]	; (800183c <main+0x280>)
 80017ee:	f000 f9ed 	bl	8001bcc <puts>
	  tick_lir24();
 80017f2:	f7ff fe93 	bl	800151c <tick_lir24>
	  HAL_Delay(100);
 80017f6:	2064      	movs	r0, #100	; 0x64
 80017f8:	f7fe fd6c 	bl	80002d4 <HAL_Delay>
 80017fc:	e7f9      	b.n	80017f2 <main+0x236>
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	40021000 	.word	0x40021000
 8001804:	48000400 	.word	0x48000400
 8001808:	48000800 	.word	0x48000800
 800180c:	10110000 	.word	0x10110000
 8001810:	20000190 	.word	0x20000190
 8001814:	40013000 	.word	0x40013000
 8001818:	2000010c 	.word	0x2000010c
 800181c:	40000400 	.word	0x40000400
 8001820:	000003e7 	.word	0x000003e7
 8001824:	200001f4 	.word	0x200001f4
 8001828:	40004400 	.word	0x40004400
 800182c:	200000a8 	.word	0x200000a8
 8001830:	40003800 	.word	0x40003800
 8001834:	20000150 	.word	0x20000150
 8001838:	40012c00 	.word	0x40012c00
 800183c:	0800249c 	.word	0x0800249c

08001840 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001840:	2001      	movs	r0, #1
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_MspInit+0x2c>)
{
 8001844:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001846:	6999      	ldr	r1, [r3, #24]
 8001848:	4301      	orrs	r1, r0
 800184a:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184e:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001850:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	4002      	ands	r2, r0
 8001854:	9200      	str	r2, [sp, #0]
 8001856:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001858:	69da      	ldr	r2, [r3, #28]
 800185a:	430a      	orrs	r2, r1
 800185c:	61da      	str	r2, [r3, #28]
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	400b      	ands	r3, r1
 8001862:	9301      	str	r3, [sp, #4]
 8001864:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001866:	b002      	add	sp, #8
 8001868:	4770      	bx	lr
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	40021000 	.word	0x40021000

08001870 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001870:	b510      	push	{r4, lr}
 8001872:	0004      	movs	r4, r0
 8001874:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001876:	2214      	movs	r2, #20
 8001878:	2100      	movs	r1, #0
 800187a:	a805      	add	r0, sp, #20
 800187c:	f000 f93d 	bl	8001afa <memset>
  if(hspi->Instance==SPI1)
 8001880:	6823      	ldr	r3, [r4, #0]
 8001882:	4a21      	ldr	r2, [pc, #132]	; (8001908 <HAL_SPI_MspInit+0x98>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d11f      	bne.n	80018c8 <HAL_SPI_MspInit+0x58>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001888:	2080      	movs	r0, #128	; 0x80
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <HAL_SPI_MspInit+0x9c>)
 800188c:	0140      	lsls	r0, r0, #5
 800188e:	6999      	ldr	r1, [r3, #24]
 8001890:	4301      	orrs	r1, r0
 8001892:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001894:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001896:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001898:	0289      	lsls	r1, r1, #10
    __HAL_RCC_SPI1_CLK_ENABLE();
 800189a:	4002      	ands	r2, r0
 800189c:	9201      	str	r2, [sp, #4]
 800189e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a0:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a4:	430a      	orrs	r2, r1
 80018a6:	615a      	str	r2, [r3, #20]
 80018a8:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018aa:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ac:	400b      	ands	r3, r1
 80018ae:	9302      	str	r3, [sp, #8]
 80018b0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018b2:	23e0      	movs	r3, #224	; 0xe0
 80018b4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	3bde      	subs	r3, #222	; 0xde
 80018b8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ba:	3301      	adds	r3, #1
 80018bc:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c0:	f7fe fd70 	bl	80003a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80018c4:	b00a      	add	sp, #40	; 0x28
 80018c6:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 80018c8:	4a11      	ldr	r2, [pc, #68]	; (8001910 <HAL_SPI_MspInit+0xa0>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d1fa      	bne.n	80018c4 <HAL_SPI_MspInit+0x54>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018ce:	2080      	movs	r0, #128	; 0x80
 80018d0:	4b0e      	ldr	r3, [pc, #56]	; (800190c <HAL_SPI_MspInit+0x9c>)
 80018d2:	01c0      	lsls	r0, r0, #7
 80018d4:	69d9      	ldr	r1, [r3, #28]
 80018d6:	4301      	orrs	r1, r0
 80018d8:	61d9      	str	r1, [r3, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018dc:	69da      	ldr	r2, [r3, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018de:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018e0:	4002      	ands	r2, r0
 80018e2:	9203      	str	r2, [sp, #12]
 80018e4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e6:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e8:	480a      	ldr	r0, [pc, #40]	; (8001914 <HAL_SPI_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	430a      	orrs	r2, r1
 80018ec:	615a      	str	r2, [r3, #20]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	400b      	ands	r3, r1
 80018f2:	9304      	str	r3, [sp, #16]
 80018f4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80018f6:	23e0      	movs	r3, #224	; 0xe0
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001900:	3301      	adds	r3, #1
 8001902:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001904:	a905      	add	r1, sp, #20
 8001906:	e7db      	b.n	80018c0 <HAL_SPI_MspInit+0x50>
 8001908:	40013000 	.word	0x40013000
 800190c:	40021000 	.word	0x40021000
 8001910:	40003800 	.word	0x40003800
 8001914:	48000400 	.word	0x48000400

08001918 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8001918:	6803      	ldr	r3, [r0, #0]
 800191a:	4a0e      	ldr	r2, [pc, #56]	; (8001954 <HAL_TIM_Base_MspInit+0x3c>)
{
 800191c:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 800191e:	4293      	cmp	r3, r2
 8001920:	d10b      	bne.n	800193a <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001922:	2080      	movs	r0, #128	; 0x80
 8001924:	4a0c      	ldr	r2, [pc, #48]	; (8001958 <HAL_TIM_Base_MspInit+0x40>)
 8001926:	0100      	lsls	r0, r0, #4
 8001928:	6991      	ldr	r1, [r2, #24]
 800192a:	4301      	orrs	r1, r0
 800192c:	6191      	str	r1, [r2, #24]
 800192e:	6993      	ldr	r3, [r2, #24]
 8001930:	4003      	ands	r3, r0
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001936:	b002      	add	sp, #8
 8001938:	4770      	bx	lr
  else if(htim_base->Instance==TIM3)
 800193a:	4a08      	ldr	r2, [pc, #32]	; (800195c <HAL_TIM_Base_MspInit+0x44>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d1fa      	bne.n	8001936 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001940:	2002      	movs	r0, #2
 8001942:	4a05      	ldr	r2, [pc, #20]	; (8001958 <HAL_TIM_Base_MspInit+0x40>)
 8001944:	69d1      	ldr	r1, [r2, #28]
 8001946:	4301      	orrs	r1, r0
 8001948:	61d1      	str	r1, [r2, #28]
 800194a:	69d3      	ldr	r3, [r2, #28]
 800194c:	4003      	ands	r3, r0
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	9b01      	ldr	r3, [sp, #4]
}
 8001952:	e7f0      	b.n	8001936 <HAL_TIM_Base_MspInit+0x1e>
 8001954:	40012c00 	.word	0x40012c00
 8001958:	40021000 	.word	0x40021000
 800195c:	40000400 	.word	0x40000400

08001960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001960:	b510      	push	{r4, lr}
 8001962:	0004      	movs	r4, r0
 8001964:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001966:	2214      	movs	r2, #20
 8001968:	2100      	movs	r1, #0
 800196a:	a803      	add	r0, sp, #12
 800196c:	f000 f8c5 	bl	8001afa <memset>
  if(huart->Instance==USART2)
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_UART_MspInit+0x54>)
 8001972:	6822      	ldr	r2, [r4, #0]
 8001974:	429a      	cmp	r2, r3
 8001976:	d11b      	bne.n	80019b0 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001978:	2280      	movs	r2, #128	; 0x80
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <HAL_UART_MspInit+0x58>)
 800197c:	0292      	lsls	r2, r2, #10
 800197e:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001980:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 8001982:	4311      	orrs	r1, r2
 8001984:	61d9      	str	r1, [r3, #28]
 8001986:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001988:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 800198a:	4011      	ands	r1, r2
 800198c:	9101      	str	r1, [sp, #4]
 800198e:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001990:	6959      	ldr	r1, [r3, #20]
 8001992:	4311      	orrs	r1, r2
 8001994:	6159      	str	r1, [r3, #20]
 8001996:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	401a      	ands	r2, r3
 800199c:	9202      	str	r2, [sp, #8]
 800199e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019a0:	230c      	movs	r3, #12
 80019a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	3b0a      	subs	r3, #10
 80019a6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80019a8:	3b01      	subs	r3, #1
 80019aa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ac:	f7fe fcfa 	bl	80003a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019b0:	b008      	add	sp, #32
 80019b2:	bd10      	pop	{r4, pc}
 80019b4:	40004400 	.word	0x40004400
 80019b8:	40021000 	.word	0x40021000

080019bc <SVC_Handler>:
 80019bc:	4770      	bx	lr

080019be <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019be:	4770      	bx	lr

080019c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c2:	f7fe fc75 	bl	80002b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */


  /* USER CODE END SysTick_IRQn 1 */
}
 80019c6:	bd10      	pop	{r4, pc}

080019c8 <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80019c8:	2080      	movs	r0, #128	; 0x80
{
 80019ca:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80019cc:	0040      	lsls	r0, r0, #1
 80019ce:	f7fe fdab 	bl	8000528 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80019d2:	bd10      	pop	{r4, pc}

080019d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d4:	b570      	push	{r4, r5, r6, lr}
 80019d6:	000e      	movs	r6, r1
 80019d8:	0015      	movs	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019da:	000c      	movs	r4, r1
 80019dc:	1ba3      	subs	r3, r4, r6
 80019de:	429d      	cmp	r5, r3
 80019e0:	dc01      	bgt.n	80019e6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80019e2:	0028      	movs	r0, r5
 80019e4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80019e6:	e000      	b.n	80019ea <_read+0x16>
 80019e8:	bf00      	nop
 80019ea:	7020      	strb	r0, [r4, #0]
 80019ec:	3401      	adds	r4, #1
 80019ee:	e7f5      	b.n	80019dc <_read+0x8>

080019f0 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <_sbrk+0x2c>)
{
 80019f2:	b510      	push	{r4, lr}
	if (heap_end == 0)
 80019f4:	6819      	ldr	r1, [r3, #0]
{
 80019f6:	0002      	movs	r2, r0
	if (heap_end == 0)
 80019f8:	2900      	cmp	r1, #0
 80019fa:	d101      	bne.n	8001a00 <_sbrk+0x10>
		heap_end = &end;
 80019fc:	4908      	ldr	r1, [pc, #32]	; (8001a20 <_sbrk+0x30>)
 80019fe:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001a00:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001a02:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001a04:	1882      	adds	r2, r0, r2
 8001a06:	428a      	cmp	r2, r1
 8001a08:	d906      	bls.n	8001a18 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001a0a:	f000 f843 	bl	8001a94 <__errno>
 8001a0e:	230c      	movs	r3, #12
 8001a10:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001a12:	2001      	movs	r0, #1
 8001a14:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001a16:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8001a18:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8001a1a:	e7fc      	b.n	8001a16 <_sbrk+0x26>
 8001a1c:	20000098 	.word	0x20000098
 8001a20:	2000027c 	.word	0x2000027c

08001a24 <_close>:

int _close(int file)
{
	return -1;
}
 8001a24:	2001      	movs	r0, #1
 8001a26:	4240      	negs	r0, r0
 8001a28:	4770      	bx	lr

08001a2a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	019b      	lsls	r3, r3, #6
	return 0;
}
 8001a2e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001a30:	604b      	str	r3, [r1, #4]
}
 8001a32:	4770      	bx	lr

08001a34 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001a34:	2001      	movs	r0, #1
 8001a36:	4770      	bx	lr

08001a38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001a38:	2000      	movs	r0, #0
 8001a3a:	4770      	bx	lr

08001a3c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001a3c:	4770      	bx	lr
	...

08001a40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a40:	480d      	ldr	r0, [pc, #52]	; (8001a78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a42:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a44:	480d      	ldr	r0, [pc, #52]	; (8001a7c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a46:	490e      	ldr	r1, [pc, #56]	; (8001a80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a48:	4a0e      	ldr	r2, [pc, #56]	; (8001a84 <LoopForever+0xe>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a4c:	e002      	b.n	8001a54 <LoopCopyDataInit>

08001a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a52:	3304      	adds	r3, #4

08001a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a58:	d3f9      	bcc.n	8001a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5a:	4a0b      	ldr	r2, [pc, #44]	; (8001a88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a5c:	4c0b      	ldr	r4, [pc, #44]	; (8001a8c <LoopForever+0x16>)
  movs r3, #0
 8001a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a60:	e001      	b.n	8001a66 <LoopFillZerobss>

08001a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a64:	3204      	adds	r2, #4

08001a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a68:	d3fb      	bcc.n	8001a62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a6a:	f7ff ffe7 	bl	8001a3c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001a6e:	f000 f817 	bl	8001aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a72:	f7ff fda3 	bl	80015bc <main>

08001a76 <LoopForever>:

LoopForever:
    b LoopForever
 8001a76:	e7fe      	b.n	8001a76 <LoopForever>
  ldr   r0, =_estack
 8001a78:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a80:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001a84:	08002528 	.word	0x08002528
  ldr r2, =_sbss
 8001a88:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001a8c:	2000027c 	.word	0x2000027c

08001a90 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a90:	e7fe      	b.n	8001a90 <ADC1_COMP_IRQHandler>
	...

08001a94 <__errno>:
 8001a94:	4b01      	ldr	r3, [pc, #4]	; (8001a9c <__errno+0x8>)
 8001a96:	6818      	ldr	r0, [r3, #0]
 8001a98:	4770      	bx	lr
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	20000010 	.word	0x20000010

08001aa0 <__libc_init_array>:
 8001aa0:	b570      	push	{r4, r5, r6, lr}
 8001aa2:	2600      	movs	r6, #0
 8001aa4:	4d0c      	ldr	r5, [pc, #48]	; (8001ad8 <__libc_init_array+0x38>)
 8001aa6:	4c0d      	ldr	r4, [pc, #52]	; (8001adc <__libc_init_array+0x3c>)
 8001aa8:	1b64      	subs	r4, r4, r5
 8001aaa:	10a4      	asrs	r4, r4, #2
 8001aac:	42a6      	cmp	r6, r4
 8001aae:	d109      	bne.n	8001ac4 <__libc_init_array+0x24>
 8001ab0:	2600      	movs	r6, #0
 8001ab2:	f000 fcd5 	bl	8002460 <_init>
 8001ab6:	4d0a      	ldr	r5, [pc, #40]	; (8001ae0 <__libc_init_array+0x40>)
 8001ab8:	4c0a      	ldr	r4, [pc, #40]	; (8001ae4 <__libc_init_array+0x44>)
 8001aba:	1b64      	subs	r4, r4, r5
 8001abc:	10a4      	asrs	r4, r4, #2
 8001abe:	42a6      	cmp	r6, r4
 8001ac0:	d105      	bne.n	8001ace <__libc_init_array+0x2e>
 8001ac2:	bd70      	pop	{r4, r5, r6, pc}
 8001ac4:	00b3      	lsls	r3, r6, #2
 8001ac6:	58eb      	ldr	r3, [r5, r3]
 8001ac8:	4798      	blx	r3
 8001aca:	3601      	adds	r6, #1
 8001acc:	e7ee      	b.n	8001aac <__libc_init_array+0xc>
 8001ace:	00b3      	lsls	r3, r6, #2
 8001ad0:	58eb      	ldr	r3, [r5, r3]
 8001ad2:	4798      	blx	r3
 8001ad4:	3601      	adds	r6, #1
 8001ad6:	e7f2      	b.n	8001abe <__libc_init_array+0x1e>
 8001ad8:	08002520 	.word	0x08002520
 8001adc:	08002520 	.word	0x08002520
 8001ae0:	08002520 	.word	0x08002520
 8001ae4:	08002524 	.word	0x08002524

08001ae8 <memcpy>:
 8001ae8:	2300      	movs	r3, #0
 8001aea:	b510      	push	{r4, lr}
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d100      	bne.n	8001af2 <memcpy+0xa>
 8001af0:	bd10      	pop	{r4, pc}
 8001af2:	5ccc      	ldrb	r4, [r1, r3]
 8001af4:	54c4      	strb	r4, [r0, r3]
 8001af6:	3301      	adds	r3, #1
 8001af8:	e7f8      	b.n	8001aec <memcpy+0x4>

08001afa <memset>:
 8001afa:	0003      	movs	r3, r0
 8001afc:	1882      	adds	r2, r0, r2
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d100      	bne.n	8001b04 <memset+0xa>
 8001b02:	4770      	bx	lr
 8001b04:	7019      	strb	r1, [r3, #0]
 8001b06:	3301      	adds	r3, #1
 8001b08:	e7f9      	b.n	8001afe <memset+0x4>
	...

08001b0c <_puts_r>:
 8001b0c:	b570      	push	{r4, r5, r6, lr}
 8001b0e:	0005      	movs	r5, r0
 8001b10:	000e      	movs	r6, r1
 8001b12:	2800      	cmp	r0, #0
 8001b14:	d004      	beq.n	8001b20 <_puts_r+0x14>
 8001b16:	6983      	ldr	r3, [r0, #24]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <_puts_r+0x14>
 8001b1c:	f000 fa24 	bl	8001f68 <__sinit>
 8001b20:	69ab      	ldr	r3, [r5, #24]
 8001b22:	68ac      	ldr	r4, [r5, #8]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d102      	bne.n	8001b2e <_puts_r+0x22>
 8001b28:	0028      	movs	r0, r5
 8001b2a:	f000 fa1d 	bl	8001f68 <__sinit>
 8001b2e:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <_puts_r+0xb4>)
 8001b30:	429c      	cmp	r4, r3
 8001b32:	d10f      	bne.n	8001b54 <_puts_r+0x48>
 8001b34:	686c      	ldr	r4, [r5, #4]
 8001b36:	89a3      	ldrh	r3, [r4, #12]
 8001b38:	071b      	lsls	r3, r3, #28
 8001b3a:	d502      	bpl.n	8001b42 <_puts_r+0x36>
 8001b3c:	6923      	ldr	r3, [r4, #16]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d120      	bne.n	8001b84 <_puts_r+0x78>
 8001b42:	0021      	movs	r1, r4
 8001b44:	0028      	movs	r0, r5
 8001b46:	f000 f8a1 	bl	8001c8c <__swsetup_r>
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	d01a      	beq.n	8001b84 <_puts_r+0x78>
 8001b4e:	2001      	movs	r0, #1
 8001b50:	4240      	negs	r0, r0
 8001b52:	bd70      	pop	{r4, r5, r6, pc}
 8001b54:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <_puts_r+0xb8>)
 8001b56:	429c      	cmp	r4, r3
 8001b58:	d101      	bne.n	8001b5e <_puts_r+0x52>
 8001b5a:	68ac      	ldr	r4, [r5, #8]
 8001b5c:	e7eb      	b.n	8001b36 <_puts_r+0x2a>
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <_puts_r+0xbc>)
 8001b60:	429c      	cmp	r4, r3
 8001b62:	d1e8      	bne.n	8001b36 <_puts_r+0x2a>
 8001b64:	68ec      	ldr	r4, [r5, #12]
 8001b66:	e7e6      	b.n	8001b36 <_puts_r+0x2a>
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	3601      	adds	r6, #1
 8001b6c:	60a3      	str	r3, [r4, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	da04      	bge.n	8001b7c <_puts_r+0x70>
 8001b72:	69a2      	ldr	r2, [r4, #24]
 8001b74:	4293      	cmp	r3, r2
 8001b76:	db16      	blt.n	8001ba6 <_puts_r+0x9a>
 8001b78:	290a      	cmp	r1, #10
 8001b7a:	d014      	beq.n	8001ba6 <_puts_r+0x9a>
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	6022      	str	r2, [r4, #0]
 8001b82:	7019      	strb	r1, [r3, #0]
 8001b84:	7831      	ldrb	r1, [r6, #0]
 8001b86:	68a3      	ldr	r3, [r4, #8]
 8001b88:	2900      	cmp	r1, #0
 8001b8a:	d1ed      	bne.n	8001b68 <_puts_r+0x5c>
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	60a3      	str	r3, [r4, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	da0f      	bge.n	8001bb4 <_puts_r+0xa8>
 8001b94:	0022      	movs	r2, r4
 8001b96:	310a      	adds	r1, #10
 8001b98:	0028      	movs	r0, r5
 8001b9a:	f000 f821 	bl	8001be0 <__swbuf_r>
 8001b9e:	1c43      	adds	r3, r0, #1
 8001ba0:	d0d5      	beq.n	8001b4e <_puts_r+0x42>
 8001ba2:	200a      	movs	r0, #10
 8001ba4:	e7d5      	b.n	8001b52 <_puts_r+0x46>
 8001ba6:	0022      	movs	r2, r4
 8001ba8:	0028      	movs	r0, r5
 8001baa:	f000 f819 	bl	8001be0 <__swbuf_r>
 8001bae:	1c43      	adds	r3, r0, #1
 8001bb0:	d1e8      	bne.n	8001b84 <_puts_r+0x78>
 8001bb2:	e7cc      	b.n	8001b4e <_puts_r+0x42>
 8001bb4:	200a      	movs	r0, #10
 8001bb6:	6823      	ldr	r3, [r4, #0]
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	6022      	str	r2, [r4, #0]
 8001bbc:	7018      	strb	r0, [r3, #0]
 8001bbe:	e7c8      	b.n	8001b52 <_puts_r+0x46>
 8001bc0:	080024e0 	.word	0x080024e0
 8001bc4:	08002500 	.word	0x08002500
 8001bc8:	080024c0 	.word	0x080024c0

08001bcc <puts>:
 8001bcc:	b510      	push	{r4, lr}
 8001bce:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <puts+0x10>)
 8001bd0:	0001      	movs	r1, r0
 8001bd2:	6818      	ldr	r0, [r3, #0]
 8001bd4:	f7ff ff9a 	bl	8001b0c <_puts_r>
 8001bd8:	bd10      	pop	{r4, pc}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	20000010 	.word	0x20000010

08001be0 <__swbuf_r>:
 8001be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be2:	0005      	movs	r5, r0
 8001be4:	000e      	movs	r6, r1
 8001be6:	0014      	movs	r4, r2
 8001be8:	2800      	cmp	r0, #0
 8001bea:	d004      	beq.n	8001bf6 <__swbuf_r+0x16>
 8001bec:	6983      	ldr	r3, [r0, #24]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <__swbuf_r+0x16>
 8001bf2:	f000 f9b9 	bl	8001f68 <__sinit>
 8001bf6:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <__swbuf_r+0xa0>)
 8001bf8:	429c      	cmp	r4, r3
 8001bfa:	d12d      	bne.n	8001c58 <__swbuf_r+0x78>
 8001bfc:	686c      	ldr	r4, [r5, #4]
 8001bfe:	69a3      	ldr	r3, [r4, #24]
 8001c00:	60a3      	str	r3, [r4, #8]
 8001c02:	89a3      	ldrh	r3, [r4, #12]
 8001c04:	071b      	lsls	r3, r3, #28
 8001c06:	d531      	bpl.n	8001c6c <__swbuf_r+0x8c>
 8001c08:	6923      	ldr	r3, [r4, #16]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d02e      	beq.n	8001c6c <__swbuf_r+0x8c>
 8001c0e:	6823      	ldr	r3, [r4, #0]
 8001c10:	6922      	ldr	r2, [r4, #16]
 8001c12:	b2f7      	uxtb	r7, r6
 8001c14:	1a98      	subs	r0, r3, r2
 8001c16:	6963      	ldr	r3, [r4, #20]
 8001c18:	b2f6      	uxtb	r6, r6
 8001c1a:	4298      	cmp	r0, r3
 8001c1c:	db05      	blt.n	8001c2a <__swbuf_r+0x4a>
 8001c1e:	0021      	movs	r1, r4
 8001c20:	0028      	movs	r0, r5
 8001c22:	f000 f933 	bl	8001e8c <_fflush_r>
 8001c26:	2800      	cmp	r0, #0
 8001c28:	d126      	bne.n	8001c78 <__swbuf_r+0x98>
 8001c2a:	68a3      	ldr	r3, [r4, #8]
 8001c2c:	3001      	adds	r0, #1
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	60a3      	str	r3, [r4, #8]
 8001c32:	6823      	ldr	r3, [r4, #0]
 8001c34:	1c5a      	adds	r2, r3, #1
 8001c36:	6022      	str	r2, [r4, #0]
 8001c38:	701f      	strb	r7, [r3, #0]
 8001c3a:	6963      	ldr	r3, [r4, #20]
 8001c3c:	4298      	cmp	r0, r3
 8001c3e:	d004      	beq.n	8001c4a <__swbuf_r+0x6a>
 8001c40:	89a3      	ldrh	r3, [r4, #12]
 8001c42:	07db      	lsls	r3, r3, #31
 8001c44:	d51a      	bpl.n	8001c7c <__swbuf_r+0x9c>
 8001c46:	2e0a      	cmp	r6, #10
 8001c48:	d118      	bne.n	8001c7c <__swbuf_r+0x9c>
 8001c4a:	0021      	movs	r1, r4
 8001c4c:	0028      	movs	r0, r5
 8001c4e:	f000 f91d 	bl	8001e8c <_fflush_r>
 8001c52:	2800      	cmp	r0, #0
 8001c54:	d012      	beq.n	8001c7c <__swbuf_r+0x9c>
 8001c56:	e00f      	b.n	8001c78 <__swbuf_r+0x98>
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <__swbuf_r+0xa4>)
 8001c5a:	429c      	cmp	r4, r3
 8001c5c:	d101      	bne.n	8001c62 <__swbuf_r+0x82>
 8001c5e:	68ac      	ldr	r4, [r5, #8]
 8001c60:	e7cd      	b.n	8001bfe <__swbuf_r+0x1e>
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <__swbuf_r+0xa8>)
 8001c64:	429c      	cmp	r4, r3
 8001c66:	d1ca      	bne.n	8001bfe <__swbuf_r+0x1e>
 8001c68:	68ec      	ldr	r4, [r5, #12]
 8001c6a:	e7c8      	b.n	8001bfe <__swbuf_r+0x1e>
 8001c6c:	0021      	movs	r1, r4
 8001c6e:	0028      	movs	r0, r5
 8001c70:	f000 f80c 	bl	8001c8c <__swsetup_r>
 8001c74:	2800      	cmp	r0, #0
 8001c76:	d0ca      	beq.n	8001c0e <__swbuf_r+0x2e>
 8001c78:	2601      	movs	r6, #1
 8001c7a:	4276      	negs	r6, r6
 8001c7c:	0030      	movs	r0, r6
 8001c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c80:	080024e0 	.word	0x080024e0
 8001c84:	08002500 	.word	0x08002500
 8001c88:	080024c0 	.word	0x080024c0

08001c8c <__swsetup_r>:
 8001c8c:	4b36      	ldr	r3, [pc, #216]	; (8001d68 <__swsetup_r+0xdc>)
 8001c8e:	b570      	push	{r4, r5, r6, lr}
 8001c90:	681d      	ldr	r5, [r3, #0]
 8001c92:	0006      	movs	r6, r0
 8001c94:	000c      	movs	r4, r1
 8001c96:	2d00      	cmp	r5, #0
 8001c98:	d005      	beq.n	8001ca6 <__swsetup_r+0x1a>
 8001c9a:	69ab      	ldr	r3, [r5, #24]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d102      	bne.n	8001ca6 <__swsetup_r+0x1a>
 8001ca0:	0028      	movs	r0, r5
 8001ca2:	f000 f961 	bl	8001f68 <__sinit>
 8001ca6:	4b31      	ldr	r3, [pc, #196]	; (8001d6c <__swsetup_r+0xe0>)
 8001ca8:	429c      	cmp	r4, r3
 8001caa:	d10f      	bne.n	8001ccc <__swsetup_r+0x40>
 8001cac:	686c      	ldr	r4, [r5, #4]
 8001cae:	230c      	movs	r3, #12
 8001cb0:	5ee2      	ldrsh	r2, [r4, r3]
 8001cb2:	b293      	uxth	r3, r2
 8001cb4:	0719      	lsls	r1, r3, #28
 8001cb6:	d42d      	bmi.n	8001d14 <__swsetup_r+0x88>
 8001cb8:	06d9      	lsls	r1, r3, #27
 8001cba:	d411      	bmi.n	8001ce0 <__swsetup_r+0x54>
 8001cbc:	2309      	movs	r3, #9
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	6033      	str	r3, [r6, #0]
 8001cc2:	3337      	adds	r3, #55	; 0x37
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	81a3      	strh	r3, [r4, #12]
 8001cc8:	4240      	negs	r0, r0
 8001cca:	bd70      	pop	{r4, r5, r6, pc}
 8001ccc:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <__swsetup_r+0xe4>)
 8001cce:	429c      	cmp	r4, r3
 8001cd0:	d101      	bne.n	8001cd6 <__swsetup_r+0x4a>
 8001cd2:	68ac      	ldr	r4, [r5, #8]
 8001cd4:	e7eb      	b.n	8001cae <__swsetup_r+0x22>
 8001cd6:	4b27      	ldr	r3, [pc, #156]	; (8001d74 <__swsetup_r+0xe8>)
 8001cd8:	429c      	cmp	r4, r3
 8001cda:	d1e8      	bne.n	8001cae <__swsetup_r+0x22>
 8001cdc:	68ec      	ldr	r4, [r5, #12]
 8001cde:	e7e6      	b.n	8001cae <__swsetup_r+0x22>
 8001ce0:	075b      	lsls	r3, r3, #29
 8001ce2:	d513      	bpl.n	8001d0c <__swsetup_r+0x80>
 8001ce4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ce6:	2900      	cmp	r1, #0
 8001ce8:	d008      	beq.n	8001cfc <__swsetup_r+0x70>
 8001cea:	0023      	movs	r3, r4
 8001cec:	3344      	adds	r3, #68	; 0x44
 8001cee:	4299      	cmp	r1, r3
 8001cf0:	d002      	beq.n	8001cf8 <__swsetup_r+0x6c>
 8001cf2:	0030      	movs	r0, r6
 8001cf4:	f000 fa3a 	bl	800216c <_free_r>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	6363      	str	r3, [r4, #52]	; 0x34
 8001cfc:	2224      	movs	r2, #36	; 0x24
 8001cfe:	89a3      	ldrh	r3, [r4, #12]
 8001d00:	4393      	bics	r3, r2
 8001d02:	81a3      	strh	r3, [r4, #12]
 8001d04:	2300      	movs	r3, #0
 8001d06:	6063      	str	r3, [r4, #4]
 8001d08:	6923      	ldr	r3, [r4, #16]
 8001d0a:	6023      	str	r3, [r4, #0]
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	89a2      	ldrh	r2, [r4, #12]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	81a3      	strh	r3, [r4, #12]
 8001d14:	6923      	ldr	r3, [r4, #16]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10b      	bne.n	8001d32 <__swsetup_r+0xa6>
 8001d1a:	21a0      	movs	r1, #160	; 0xa0
 8001d1c:	2280      	movs	r2, #128	; 0x80
 8001d1e:	89a3      	ldrh	r3, [r4, #12]
 8001d20:	0089      	lsls	r1, r1, #2
 8001d22:	0092      	lsls	r2, r2, #2
 8001d24:	400b      	ands	r3, r1
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d003      	beq.n	8001d32 <__swsetup_r+0xa6>
 8001d2a:	0021      	movs	r1, r4
 8001d2c:	0030      	movs	r0, r6
 8001d2e:	f000 f9d9 	bl	80020e4 <__smakebuf_r>
 8001d32:	2301      	movs	r3, #1
 8001d34:	89a2      	ldrh	r2, [r4, #12]
 8001d36:	4013      	ands	r3, r2
 8001d38:	d011      	beq.n	8001d5e <__swsetup_r+0xd2>
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60a3      	str	r3, [r4, #8]
 8001d3e:	6963      	ldr	r3, [r4, #20]
 8001d40:	425b      	negs	r3, r3
 8001d42:	61a3      	str	r3, [r4, #24]
 8001d44:	2000      	movs	r0, #0
 8001d46:	6923      	ldr	r3, [r4, #16]
 8001d48:	4283      	cmp	r3, r0
 8001d4a:	d1be      	bne.n	8001cca <__swsetup_r+0x3e>
 8001d4c:	230c      	movs	r3, #12
 8001d4e:	5ee2      	ldrsh	r2, [r4, r3]
 8001d50:	0613      	lsls	r3, r2, #24
 8001d52:	d5ba      	bpl.n	8001cca <__swsetup_r+0x3e>
 8001d54:	2340      	movs	r3, #64	; 0x40
 8001d56:	4313      	orrs	r3, r2
 8001d58:	81a3      	strh	r3, [r4, #12]
 8001d5a:	3801      	subs	r0, #1
 8001d5c:	e7b5      	b.n	8001cca <__swsetup_r+0x3e>
 8001d5e:	0792      	lsls	r2, r2, #30
 8001d60:	d400      	bmi.n	8001d64 <__swsetup_r+0xd8>
 8001d62:	6963      	ldr	r3, [r4, #20]
 8001d64:	60a3      	str	r3, [r4, #8]
 8001d66:	e7ed      	b.n	8001d44 <__swsetup_r+0xb8>
 8001d68:	20000010 	.word	0x20000010
 8001d6c:	080024e0 	.word	0x080024e0
 8001d70:	08002500 	.word	0x08002500
 8001d74:	080024c0 	.word	0x080024c0

08001d78 <__sflush_r>:
 8001d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d7a:	898a      	ldrh	r2, [r1, #12]
 8001d7c:	0005      	movs	r5, r0
 8001d7e:	000c      	movs	r4, r1
 8001d80:	0713      	lsls	r3, r2, #28
 8001d82:	d460      	bmi.n	8001e46 <__sflush_r+0xce>
 8001d84:	684b      	ldr	r3, [r1, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	dc04      	bgt.n	8001d94 <__sflush_r+0x1c>
 8001d8a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	dc01      	bgt.n	8001d94 <__sflush_r+0x1c>
 8001d90:	2000      	movs	r0, #0
 8001d92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001d94:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001d96:	2f00      	cmp	r7, #0
 8001d98:	d0fa      	beq.n	8001d90 <__sflush_r+0x18>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	682e      	ldr	r6, [r5, #0]
 8001d9e:	602b      	str	r3, [r5, #0]
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	015b      	lsls	r3, r3, #5
 8001da4:	401a      	ands	r2, r3
 8001da6:	d034      	beq.n	8001e12 <__sflush_r+0x9a>
 8001da8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001daa:	89a3      	ldrh	r3, [r4, #12]
 8001dac:	075b      	lsls	r3, r3, #29
 8001dae:	d506      	bpl.n	8001dbe <__sflush_r+0x46>
 8001db0:	6863      	ldr	r3, [r4, #4]
 8001db2:	1ac0      	subs	r0, r0, r3
 8001db4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <__sflush_r+0x46>
 8001dba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dbc:	1ac0      	subs	r0, r0, r3
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	6a21      	ldr	r1, [r4, #32]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	0028      	movs	r0, r5
 8001dc6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001dc8:	47b8      	blx	r7
 8001dca:	89a1      	ldrh	r1, [r4, #12]
 8001dcc:	1c43      	adds	r3, r0, #1
 8001dce:	d106      	bne.n	8001dde <__sflush_r+0x66>
 8001dd0:	682b      	ldr	r3, [r5, #0]
 8001dd2:	2b1d      	cmp	r3, #29
 8001dd4:	d831      	bhi.n	8001e3a <__sflush_r+0xc2>
 8001dd6:	4a2c      	ldr	r2, [pc, #176]	; (8001e88 <__sflush_r+0x110>)
 8001dd8:	40da      	lsrs	r2, r3
 8001dda:	07d3      	lsls	r3, r2, #31
 8001ddc:	d52d      	bpl.n	8001e3a <__sflush_r+0xc2>
 8001dde:	2300      	movs	r3, #0
 8001de0:	6063      	str	r3, [r4, #4]
 8001de2:	6923      	ldr	r3, [r4, #16]
 8001de4:	6023      	str	r3, [r4, #0]
 8001de6:	04cb      	lsls	r3, r1, #19
 8001de8:	d505      	bpl.n	8001df6 <__sflush_r+0x7e>
 8001dea:	1c43      	adds	r3, r0, #1
 8001dec:	d102      	bne.n	8001df4 <__sflush_r+0x7c>
 8001dee:	682b      	ldr	r3, [r5, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d100      	bne.n	8001df6 <__sflush_r+0x7e>
 8001df4:	6560      	str	r0, [r4, #84]	; 0x54
 8001df6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001df8:	602e      	str	r6, [r5, #0]
 8001dfa:	2900      	cmp	r1, #0
 8001dfc:	d0c8      	beq.n	8001d90 <__sflush_r+0x18>
 8001dfe:	0023      	movs	r3, r4
 8001e00:	3344      	adds	r3, #68	; 0x44
 8001e02:	4299      	cmp	r1, r3
 8001e04:	d002      	beq.n	8001e0c <__sflush_r+0x94>
 8001e06:	0028      	movs	r0, r5
 8001e08:	f000 f9b0 	bl	800216c <_free_r>
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	6360      	str	r0, [r4, #52]	; 0x34
 8001e10:	e7bf      	b.n	8001d92 <__sflush_r+0x1a>
 8001e12:	2301      	movs	r3, #1
 8001e14:	6a21      	ldr	r1, [r4, #32]
 8001e16:	0028      	movs	r0, r5
 8001e18:	47b8      	blx	r7
 8001e1a:	1c43      	adds	r3, r0, #1
 8001e1c:	d1c5      	bne.n	8001daa <__sflush_r+0x32>
 8001e1e:	682b      	ldr	r3, [r5, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0c2      	beq.n	8001daa <__sflush_r+0x32>
 8001e24:	2b1d      	cmp	r3, #29
 8001e26:	d001      	beq.n	8001e2c <__sflush_r+0xb4>
 8001e28:	2b16      	cmp	r3, #22
 8001e2a:	d101      	bne.n	8001e30 <__sflush_r+0xb8>
 8001e2c:	602e      	str	r6, [r5, #0]
 8001e2e:	e7af      	b.n	8001d90 <__sflush_r+0x18>
 8001e30:	2340      	movs	r3, #64	; 0x40
 8001e32:	89a2      	ldrh	r2, [r4, #12]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	81a3      	strh	r3, [r4, #12]
 8001e38:	e7ab      	b.n	8001d92 <__sflush_r+0x1a>
 8001e3a:	2340      	movs	r3, #64	; 0x40
 8001e3c:	430b      	orrs	r3, r1
 8001e3e:	2001      	movs	r0, #1
 8001e40:	81a3      	strh	r3, [r4, #12]
 8001e42:	4240      	negs	r0, r0
 8001e44:	e7a5      	b.n	8001d92 <__sflush_r+0x1a>
 8001e46:	690f      	ldr	r7, [r1, #16]
 8001e48:	2f00      	cmp	r7, #0
 8001e4a:	d0a1      	beq.n	8001d90 <__sflush_r+0x18>
 8001e4c:	680b      	ldr	r3, [r1, #0]
 8001e4e:	600f      	str	r7, [r1, #0]
 8001e50:	1bdb      	subs	r3, r3, r7
 8001e52:	9301      	str	r3, [sp, #4]
 8001e54:	2300      	movs	r3, #0
 8001e56:	0792      	lsls	r2, r2, #30
 8001e58:	d100      	bne.n	8001e5c <__sflush_r+0xe4>
 8001e5a:	694b      	ldr	r3, [r1, #20]
 8001e5c:	60a3      	str	r3, [r4, #8]
 8001e5e:	9b01      	ldr	r3, [sp, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	dc00      	bgt.n	8001e66 <__sflush_r+0xee>
 8001e64:	e794      	b.n	8001d90 <__sflush_r+0x18>
 8001e66:	9b01      	ldr	r3, [sp, #4]
 8001e68:	003a      	movs	r2, r7
 8001e6a:	6a21      	ldr	r1, [r4, #32]
 8001e6c:	0028      	movs	r0, r5
 8001e6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001e70:	47b0      	blx	r6
 8001e72:	2800      	cmp	r0, #0
 8001e74:	dc03      	bgt.n	8001e7e <__sflush_r+0x106>
 8001e76:	2340      	movs	r3, #64	; 0x40
 8001e78:	89a2      	ldrh	r2, [r4, #12]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	e7df      	b.n	8001e3e <__sflush_r+0xc6>
 8001e7e:	9b01      	ldr	r3, [sp, #4]
 8001e80:	183f      	adds	r7, r7, r0
 8001e82:	1a1b      	subs	r3, r3, r0
 8001e84:	9301      	str	r3, [sp, #4]
 8001e86:	e7ea      	b.n	8001e5e <__sflush_r+0xe6>
 8001e88:	20400001 	.word	0x20400001

08001e8c <_fflush_r>:
 8001e8c:	690b      	ldr	r3, [r1, #16]
 8001e8e:	b570      	push	{r4, r5, r6, lr}
 8001e90:	0005      	movs	r5, r0
 8001e92:	000c      	movs	r4, r1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <_fflush_r+0x10>
 8001e98:	2000      	movs	r0, #0
 8001e9a:	bd70      	pop	{r4, r5, r6, pc}
 8001e9c:	2800      	cmp	r0, #0
 8001e9e:	d004      	beq.n	8001eaa <_fflush_r+0x1e>
 8001ea0:	6983      	ldr	r3, [r0, #24]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <_fflush_r+0x1e>
 8001ea6:	f000 f85f 	bl	8001f68 <__sinit>
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <_fflush_r+0x4c>)
 8001eac:	429c      	cmp	r4, r3
 8001eae:	d109      	bne.n	8001ec4 <_fflush_r+0x38>
 8001eb0:	686c      	ldr	r4, [r5, #4]
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	5ea3      	ldrsh	r3, [r4, r2]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0ee      	beq.n	8001e98 <_fflush_r+0xc>
 8001eba:	0021      	movs	r1, r4
 8001ebc:	0028      	movs	r0, r5
 8001ebe:	f7ff ff5b 	bl	8001d78 <__sflush_r>
 8001ec2:	e7ea      	b.n	8001e9a <_fflush_r+0xe>
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <_fflush_r+0x50>)
 8001ec6:	429c      	cmp	r4, r3
 8001ec8:	d101      	bne.n	8001ece <_fflush_r+0x42>
 8001eca:	68ac      	ldr	r4, [r5, #8]
 8001ecc:	e7f1      	b.n	8001eb2 <_fflush_r+0x26>
 8001ece:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <_fflush_r+0x54>)
 8001ed0:	429c      	cmp	r4, r3
 8001ed2:	d1ee      	bne.n	8001eb2 <_fflush_r+0x26>
 8001ed4:	68ec      	ldr	r4, [r5, #12]
 8001ed6:	e7ec      	b.n	8001eb2 <_fflush_r+0x26>
 8001ed8:	080024e0 	.word	0x080024e0
 8001edc:	08002500 	.word	0x08002500
 8001ee0:	080024c0 	.word	0x080024c0

08001ee4 <_cleanup_r>:
 8001ee4:	b510      	push	{r4, lr}
 8001ee6:	4902      	ldr	r1, [pc, #8]	; (8001ef0 <_cleanup_r+0xc>)
 8001ee8:	f000 f8b2 	bl	8002050 <_fwalk_reent>
 8001eec:	bd10      	pop	{r4, pc}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	08001e8d 	.word	0x08001e8d

08001ef4 <std.isra.0>:
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	b510      	push	{r4, lr}
 8001ef8:	0004      	movs	r4, r0
 8001efa:	6003      	str	r3, [r0, #0]
 8001efc:	6043      	str	r3, [r0, #4]
 8001efe:	6083      	str	r3, [r0, #8]
 8001f00:	8181      	strh	r1, [r0, #12]
 8001f02:	6643      	str	r3, [r0, #100]	; 0x64
 8001f04:	81c2      	strh	r2, [r0, #14]
 8001f06:	6103      	str	r3, [r0, #16]
 8001f08:	6143      	str	r3, [r0, #20]
 8001f0a:	6183      	str	r3, [r0, #24]
 8001f0c:	0019      	movs	r1, r3
 8001f0e:	2208      	movs	r2, #8
 8001f10:	305c      	adds	r0, #92	; 0x5c
 8001f12:	f7ff fdf2 	bl	8001afa <memset>
 8001f16:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <std.isra.0+0x38>)
 8001f18:	6224      	str	r4, [r4, #32]
 8001f1a:	6263      	str	r3, [r4, #36]	; 0x24
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <std.isra.0+0x3c>)
 8001f1e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f20:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <std.isra.0+0x40>)
 8001f22:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <std.isra.0+0x44>)
 8001f26:	6323      	str	r3, [r4, #48]	; 0x30
 8001f28:	bd10      	pop	{r4, pc}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	080022e1 	.word	0x080022e1
 8001f30:	08002309 	.word	0x08002309
 8001f34:	08002341 	.word	0x08002341
 8001f38:	0800236d 	.word	0x0800236d

08001f3c <__sfmoreglue>:
 8001f3c:	b570      	push	{r4, r5, r6, lr}
 8001f3e:	2568      	movs	r5, #104	; 0x68
 8001f40:	1e4a      	subs	r2, r1, #1
 8001f42:	4355      	muls	r5, r2
 8001f44:	000e      	movs	r6, r1
 8001f46:	0029      	movs	r1, r5
 8001f48:	3174      	adds	r1, #116	; 0x74
 8001f4a:	f000 f959 	bl	8002200 <_malloc_r>
 8001f4e:	1e04      	subs	r4, r0, #0
 8001f50:	d008      	beq.n	8001f64 <__sfmoreglue+0x28>
 8001f52:	2100      	movs	r1, #0
 8001f54:	002a      	movs	r2, r5
 8001f56:	6001      	str	r1, [r0, #0]
 8001f58:	6046      	str	r6, [r0, #4]
 8001f5a:	300c      	adds	r0, #12
 8001f5c:	60a0      	str	r0, [r4, #8]
 8001f5e:	3268      	adds	r2, #104	; 0x68
 8001f60:	f7ff fdcb 	bl	8001afa <memset>
 8001f64:	0020      	movs	r0, r4
 8001f66:	bd70      	pop	{r4, r5, r6, pc}

08001f68 <__sinit>:
 8001f68:	6983      	ldr	r3, [r0, #24]
 8001f6a:	b513      	push	{r0, r1, r4, lr}
 8001f6c:	0004      	movs	r4, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d128      	bne.n	8001fc4 <__sinit+0x5c>
 8001f72:	6483      	str	r3, [r0, #72]	; 0x48
 8001f74:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001f76:	6503      	str	r3, [r0, #80]	; 0x50
 8001f78:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <__sinit+0x60>)
 8001f7a:	4a14      	ldr	r2, [pc, #80]	; (8001fcc <__sinit+0x64>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6282      	str	r2, [r0, #40]	; 0x28
 8001f80:	9301      	str	r3, [sp, #4]
 8001f82:	4298      	cmp	r0, r3
 8001f84:	d101      	bne.n	8001f8a <__sinit+0x22>
 8001f86:	2301      	movs	r3, #1
 8001f88:	6183      	str	r3, [r0, #24]
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 f820 	bl	8001fd0 <__sfp>
 8001f90:	6060      	str	r0, [r4, #4]
 8001f92:	0020      	movs	r0, r4
 8001f94:	f000 f81c 	bl	8001fd0 <__sfp>
 8001f98:	60a0      	str	r0, [r4, #8]
 8001f9a:	0020      	movs	r0, r4
 8001f9c:	f000 f818 	bl	8001fd0 <__sfp>
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	60e0      	str	r0, [r4, #12]
 8001fa4:	2104      	movs	r1, #4
 8001fa6:	6860      	ldr	r0, [r4, #4]
 8001fa8:	f7ff ffa4 	bl	8001ef4 <std.isra.0>
 8001fac:	2201      	movs	r2, #1
 8001fae:	2109      	movs	r1, #9
 8001fb0:	68a0      	ldr	r0, [r4, #8]
 8001fb2:	f7ff ff9f 	bl	8001ef4 <std.isra.0>
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	2112      	movs	r1, #18
 8001fba:	68e0      	ldr	r0, [r4, #12]
 8001fbc:	f7ff ff9a 	bl	8001ef4 <std.isra.0>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	61a3      	str	r3, [r4, #24]
 8001fc4:	bd13      	pop	{r0, r1, r4, pc}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	080024bc 	.word	0x080024bc
 8001fcc:	08001ee5 	.word	0x08001ee5

08001fd0 <__sfp>:
 8001fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fd2:	4b1e      	ldr	r3, [pc, #120]	; (800204c <__sfp+0x7c>)
 8001fd4:	0007      	movs	r7, r0
 8001fd6:	681e      	ldr	r6, [r3, #0]
 8001fd8:	69b3      	ldr	r3, [r6, #24]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d102      	bne.n	8001fe4 <__sfp+0x14>
 8001fde:	0030      	movs	r0, r6
 8001fe0:	f7ff ffc2 	bl	8001f68 <__sinit>
 8001fe4:	3648      	adds	r6, #72	; 0x48
 8001fe6:	68b4      	ldr	r4, [r6, #8]
 8001fe8:	6873      	ldr	r3, [r6, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	d504      	bpl.n	8001ff8 <__sfp+0x28>
 8001fee:	6833      	ldr	r3, [r6, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d007      	beq.n	8002004 <__sfp+0x34>
 8001ff4:	6836      	ldr	r6, [r6, #0]
 8001ff6:	e7f6      	b.n	8001fe6 <__sfp+0x16>
 8001ff8:	220c      	movs	r2, #12
 8001ffa:	5ea5      	ldrsh	r5, [r4, r2]
 8001ffc:	2d00      	cmp	r5, #0
 8001ffe:	d00d      	beq.n	800201c <__sfp+0x4c>
 8002000:	3468      	adds	r4, #104	; 0x68
 8002002:	e7f2      	b.n	8001fea <__sfp+0x1a>
 8002004:	2104      	movs	r1, #4
 8002006:	0038      	movs	r0, r7
 8002008:	f7ff ff98 	bl	8001f3c <__sfmoreglue>
 800200c:	6030      	str	r0, [r6, #0]
 800200e:	2800      	cmp	r0, #0
 8002010:	d1f0      	bne.n	8001ff4 <__sfp+0x24>
 8002012:	230c      	movs	r3, #12
 8002014:	0004      	movs	r4, r0
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	0020      	movs	r0, r4
 800201a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800201c:	2301      	movs	r3, #1
 800201e:	0020      	movs	r0, r4
 8002020:	425b      	negs	r3, r3
 8002022:	81e3      	strh	r3, [r4, #14]
 8002024:	3302      	adds	r3, #2
 8002026:	81a3      	strh	r3, [r4, #12]
 8002028:	6665      	str	r5, [r4, #100]	; 0x64
 800202a:	6025      	str	r5, [r4, #0]
 800202c:	60a5      	str	r5, [r4, #8]
 800202e:	6065      	str	r5, [r4, #4]
 8002030:	6125      	str	r5, [r4, #16]
 8002032:	6165      	str	r5, [r4, #20]
 8002034:	61a5      	str	r5, [r4, #24]
 8002036:	2208      	movs	r2, #8
 8002038:	0029      	movs	r1, r5
 800203a:	305c      	adds	r0, #92	; 0x5c
 800203c:	f7ff fd5d 	bl	8001afa <memset>
 8002040:	6365      	str	r5, [r4, #52]	; 0x34
 8002042:	63a5      	str	r5, [r4, #56]	; 0x38
 8002044:	64a5      	str	r5, [r4, #72]	; 0x48
 8002046:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002048:	e7e6      	b.n	8002018 <__sfp+0x48>
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	080024bc 	.word	0x080024bc

08002050 <_fwalk_reent>:
 8002050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002052:	0004      	movs	r4, r0
 8002054:	0007      	movs	r7, r0
 8002056:	2600      	movs	r6, #0
 8002058:	9101      	str	r1, [sp, #4]
 800205a:	3448      	adds	r4, #72	; 0x48
 800205c:	2c00      	cmp	r4, #0
 800205e:	d101      	bne.n	8002064 <_fwalk_reent+0x14>
 8002060:	0030      	movs	r0, r6
 8002062:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002064:	6863      	ldr	r3, [r4, #4]
 8002066:	68a5      	ldr	r5, [r4, #8]
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	9b00      	ldr	r3, [sp, #0]
 800206c:	3b01      	subs	r3, #1
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	d501      	bpl.n	8002076 <_fwalk_reent+0x26>
 8002072:	6824      	ldr	r4, [r4, #0]
 8002074:	e7f2      	b.n	800205c <_fwalk_reent+0xc>
 8002076:	89ab      	ldrh	r3, [r5, #12]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d908      	bls.n	800208e <_fwalk_reent+0x3e>
 800207c:	220e      	movs	r2, #14
 800207e:	5eab      	ldrsh	r3, [r5, r2]
 8002080:	3301      	adds	r3, #1
 8002082:	d004      	beq.n	800208e <_fwalk_reent+0x3e>
 8002084:	0029      	movs	r1, r5
 8002086:	0038      	movs	r0, r7
 8002088:	9b01      	ldr	r3, [sp, #4]
 800208a:	4798      	blx	r3
 800208c:	4306      	orrs	r6, r0
 800208e:	3568      	adds	r5, #104	; 0x68
 8002090:	e7eb      	b.n	800206a <_fwalk_reent+0x1a>
	...

08002094 <__swhatbuf_r>:
 8002094:	b570      	push	{r4, r5, r6, lr}
 8002096:	000e      	movs	r6, r1
 8002098:	001d      	movs	r5, r3
 800209a:	230e      	movs	r3, #14
 800209c:	5ec9      	ldrsh	r1, [r1, r3]
 800209e:	b090      	sub	sp, #64	; 0x40
 80020a0:	0014      	movs	r4, r2
 80020a2:	2900      	cmp	r1, #0
 80020a4:	da07      	bge.n	80020b6 <__swhatbuf_r+0x22>
 80020a6:	2300      	movs	r3, #0
 80020a8:	602b      	str	r3, [r5, #0]
 80020aa:	89b3      	ldrh	r3, [r6, #12]
 80020ac:	061b      	lsls	r3, r3, #24
 80020ae:	d411      	bmi.n	80020d4 <__swhatbuf_r+0x40>
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	e00f      	b.n	80020d6 <__swhatbuf_r+0x42>
 80020b6:	aa01      	add	r2, sp, #4
 80020b8:	f000 f984 	bl	80023c4 <_fstat_r>
 80020bc:	2800      	cmp	r0, #0
 80020be:	dbf2      	blt.n	80020a6 <__swhatbuf_r+0x12>
 80020c0:	22f0      	movs	r2, #240	; 0xf0
 80020c2:	9b02      	ldr	r3, [sp, #8]
 80020c4:	0212      	lsls	r2, r2, #8
 80020c6:	4013      	ands	r3, r2
 80020c8:	4a05      	ldr	r2, [pc, #20]	; (80020e0 <__swhatbuf_r+0x4c>)
 80020ca:	189b      	adds	r3, r3, r2
 80020cc:	425a      	negs	r2, r3
 80020ce:	4153      	adcs	r3, r2
 80020d0:	602b      	str	r3, [r5, #0]
 80020d2:	e7ed      	b.n	80020b0 <__swhatbuf_r+0x1c>
 80020d4:	2340      	movs	r3, #64	; 0x40
 80020d6:	2000      	movs	r0, #0
 80020d8:	6023      	str	r3, [r4, #0]
 80020da:	b010      	add	sp, #64	; 0x40
 80020dc:	bd70      	pop	{r4, r5, r6, pc}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	ffffe000 	.word	0xffffe000

080020e4 <__smakebuf_r>:
 80020e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020e6:	2602      	movs	r6, #2
 80020e8:	898b      	ldrh	r3, [r1, #12]
 80020ea:	0005      	movs	r5, r0
 80020ec:	000c      	movs	r4, r1
 80020ee:	4233      	tst	r3, r6
 80020f0:	d006      	beq.n	8002100 <__smakebuf_r+0x1c>
 80020f2:	0023      	movs	r3, r4
 80020f4:	3347      	adds	r3, #71	; 0x47
 80020f6:	6023      	str	r3, [r4, #0]
 80020f8:	6123      	str	r3, [r4, #16]
 80020fa:	2301      	movs	r3, #1
 80020fc:	6163      	str	r3, [r4, #20]
 80020fe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002100:	ab01      	add	r3, sp, #4
 8002102:	466a      	mov	r2, sp
 8002104:	f7ff ffc6 	bl	8002094 <__swhatbuf_r>
 8002108:	9900      	ldr	r1, [sp, #0]
 800210a:	0007      	movs	r7, r0
 800210c:	0028      	movs	r0, r5
 800210e:	f000 f877 	bl	8002200 <_malloc_r>
 8002112:	2800      	cmp	r0, #0
 8002114:	d108      	bne.n	8002128 <__smakebuf_r+0x44>
 8002116:	220c      	movs	r2, #12
 8002118:	5ea3      	ldrsh	r3, [r4, r2]
 800211a:	059a      	lsls	r2, r3, #22
 800211c:	d4ef      	bmi.n	80020fe <__smakebuf_r+0x1a>
 800211e:	2203      	movs	r2, #3
 8002120:	4393      	bics	r3, r2
 8002122:	431e      	orrs	r6, r3
 8002124:	81a6      	strh	r6, [r4, #12]
 8002126:	e7e4      	b.n	80020f2 <__smakebuf_r+0xe>
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <__smakebuf_r+0x84>)
 800212a:	62ab      	str	r3, [r5, #40]	; 0x28
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	89a2      	ldrh	r2, [r4, #12]
 8002130:	6020      	str	r0, [r4, #0]
 8002132:	4313      	orrs	r3, r2
 8002134:	81a3      	strh	r3, [r4, #12]
 8002136:	9b00      	ldr	r3, [sp, #0]
 8002138:	6120      	str	r0, [r4, #16]
 800213a:	6163      	str	r3, [r4, #20]
 800213c:	9b01      	ldr	r3, [sp, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00d      	beq.n	800215e <__smakebuf_r+0x7a>
 8002142:	230e      	movs	r3, #14
 8002144:	5ee1      	ldrsh	r1, [r4, r3]
 8002146:	0028      	movs	r0, r5
 8002148:	f000 f94e 	bl	80023e8 <_isatty_r>
 800214c:	2800      	cmp	r0, #0
 800214e:	d006      	beq.n	800215e <__smakebuf_r+0x7a>
 8002150:	2203      	movs	r2, #3
 8002152:	89a3      	ldrh	r3, [r4, #12]
 8002154:	4393      	bics	r3, r2
 8002156:	001a      	movs	r2, r3
 8002158:	2301      	movs	r3, #1
 800215a:	4313      	orrs	r3, r2
 800215c:	81a3      	strh	r3, [r4, #12]
 800215e:	89a0      	ldrh	r0, [r4, #12]
 8002160:	4338      	orrs	r0, r7
 8002162:	81a0      	strh	r0, [r4, #12]
 8002164:	e7cb      	b.n	80020fe <__smakebuf_r+0x1a>
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	08001ee5 	.word	0x08001ee5

0800216c <_free_r>:
 800216c:	b570      	push	{r4, r5, r6, lr}
 800216e:	0005      	movs	r5, r0
 8002170:	2900      	cmp	r1, #0
 8002172:	d010      	beq.n	8002196 <_free_r+0x2a>
 8002174:	1f0c      	subs	r4, r1, #4
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	da00      	bge.n	800217e <_free_r+0x12>
 800217c:	18e4      	adds	r4, r4, r3
 800217e:	0028      	movs	r0, r5
 8002180:	f000 f958 	bl	8002434 <__malloc_lock>
 8002184:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <_free_r+0x90>)
 8002186:	6813      	ldr	r3, [r2, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d105      	bne.n	8002198 <_free_r+0x2c>
 800218c:	6063      	str	r3, [r4, #4]
 800218e:	6014      	str	r4, [r2, #0]
 8002190:	0028      	movs	r0, r5
 8002192:	f000 f950 	bl	8002436 <__malloc_unlock>
 8002196:	bd70      	pop	{r4, r5, r6, pc}
 8002198:	42a3      	cmp	r3, r4
 800219a:	d909      	bls.n	80021b0 <_free_r+0x44>
 800219c:	6821      	ldr	r1, [r4, #0]
 800219e:	1860      	adds	r0, r4, r1
 80021a0:	4283      	cmp	r3, r0
 80021a2:	d1f3      	bne.n	800218c <_free_r+0x20>
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	1841      	adds	r1, r0, r1
 80021aa:	6021      	str	r1, [r4, #0]
 80021ac:	e7ee      	b.n	800218c <_free_r+0x20>
 80021ae:	0013      	movs	r3, r2
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	2a00      	cmp	r2, #0
 80021b4:	d001      	beq.n	80021ba <_free_r+0x4e>
 80021b6:	42a2      	cmp	r2, r4
 80021b8:	d9f9      	bls.n	80021ae <_free_r+0x42>
 80021ba:	6819      	ldr	r1, [r3, #0]
 80021bc:	1858      	adds	r0, r3, r1
 80021be:	42a0      	cmp	r0, r4
 80021c0:	d10b      	bne.n	80021da <_free_r+0x6e>
 80021c2:	6820      	ldr	r0, [r4, #0]
 80021c4:	1809      	adds	r1, r1, r0
 80021c6:	1858      	adds	r0, r3, r1
 80021c8:	6019      	str	r1, [r3, #0]
 80021ca:	4282      	cmp	r2, r0
 80021cc:	d1e0      	bne.n	8002190 <_free_r+0x24>
 80021ce:	6810      	ldr	r0, [r2, #0]
 80021d0:	6852      	ldr	r2, [r2, #4]
 80021d2:	1841      	adds	r1, r0, r1
 80021d4:	6019      	str	r1, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	e7da      	b.n	8002190 <_free_r+0x24>
 80021da:	42a0      	cmp	r0, r4
 80021dc:	d902      	bls.n	80021e4 <_free_r+0x78>
 80021de:	230c      	movs	r3, #12
 80021e0:	602b      	str	r3, [r5, #0]
 80021e2:	e7d5      	b.n	8002190 <_free_r+0x24>
 80021e4:	6821      	ldr	r1, [r4, #0]
 80021e6:	1860      	adds	r0, r4, r1
 80021e8:	4282      	cmp	r2, r0
 80021ea:	d103      	bne.n	80021f4 <_free_r+0x88>
 80021ec:	6810      	ldr	r0, [r2, #0]
 80021ee:	6852      	ldr	r2, [r2, #4]
 80021f0:	1841      	adds	r1, r0, r1
 80021f2:	6021      	str	r1, [r4, #0]
 80021f4:	6062      	str	r2, [r4, #4]
 80021f6:	605c      	str	r4, [r3, #4]
 80021f8:	e7ca      	b.n	8002190 <_free_r+0x24>
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	2000009c 	.word	0x2000009c

08002200 <_malloc_r>:
 8002200:	2303      	movs	r3, #3
 8002202:	b570      	push	{r4, r5, r6, lr}
 8002204:	1ccd      	adds	r5, r1, #3
 8002206:	439d      	bics	r5, r3
 8002208:	3508      	adds	r5, #8
 800220a:	0006      	movs	r6, r0
 800220c:	2d0c      	cmp	r5, #12
 800220e:	d21e      	bcs.n	800224e <_malloc_r+0x4e>
 8002210:	250c      	movs	r5, #12
 8002212:	42a9      	cmp	r1, r5
 8002214:	d81d      	bhi.n	8002252 <_malloc_r+0x52>
 8002216:	0030      	movs	r0, r6
 8002218:	f000 f90c 	bl	8002434 <__malloc_lock>
 800221c:	4a25      	ldr	r2, [pc, #148]	; (80022b4 <_malloc_r+0xb4>)
 800221e:	6814      	ldr	r4, [r2, #0]
 8002220:	0021      	movs	r1, r4
 8002222:	2900      	cmp	r1, #0
 8002224:	d119      	bne.n	800225a <_malloc_r+0x5a>
 8002226:	4c24      	ldr	r4, [pc, #144]	; (80022b8 <_malloc_r+0xb8>)
 8002228:	6823      	ldr	r3, [r4, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d103      	bne.n	8002236 <_malloc_r+0x36>
 800222e:	0030      	movs	r0, r6
 8002230:	f000 f844 	bl	80022bc <_sbrk_r>
 8002234:	6020      	str	r0, [r4, #0]
 8002236:	0029      	movs	r1, r5
 8002238:	0030      	movs	r0, r6
 800223a:	f000 f83f 	bl	80022bc <_sbrk_r>
 800223e:	1c43      	adds	r3, r0, #1
 8002240:	d12c      	bne.n	800229c <_malloc_r+0x9c>
 8002242:	230c      	movs	r3, #12
 8002244:	0030      	movs	r0, r6
 8002246:	6033      	str	r3, [r6, #0]
 8002248:	f000 f8f5 	bl	8002436 <__malloc_unlock>
 800224c:	e003      	b.n	8002256 <_malloc_r+0x56>
 800224e:	2d00      	cmp	r5, #0
 8002250:	dadf      	bge.n	8002212 <_malloc_r+0x12>
 8002252:	230c      	movs	r3, #12
 8002254:	6033      	str	r3, [r6, #0]
 8002256:	2000      	movs	r0, #0
 8002258:	bd70      	pop	{r4, r5, r6, pc}
 800225a:	680b      	ldr	r3, [r1, #0]
 800225c:	1b5b      	subs	r3, r3, r5
 800225e:	d41a      	bmi.n	8002296 <_malloc_r+0x96>
 8002260:	2b0b      	cmp	r3, #11
 8002262:	d903      	bls.n	800226c <_malloc_r+0x6c>
 8002264:	600b      	str	r3, [r1, #0]
 8002266:	18cc      	adds	r4, r1, r3
 8002268:	6025      	str	r5, [r4, #0]
 800226a:	e003      	b.n	8002274 <_malloc_r+0x74>
 800226c:	428c      	cmp	r4, r1
 800226e:	d10e      	bne.n	800228e <_malloc_r+0x8e>
 8002270:	6863      	ldr	r3, [r4, #4]
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	0030      	movs	r0, r6
 8002276:	f000 f8de 	bl	8002436 <__malloc_unlock>
 800227a:	0020      	movs	r0, r4
 800227c:	2207      	movs	r2, #7
 800227e:	300b      	adds	r0, #11
 8002280:	1d23      	adds	r3, r4, #4
 8002282:	4390      	bics	r0, r2
 8002284:	1ac3      	subs	r3, r0, r3
 8002286:	d0e7      	beq.n	8002258 <_malloc_r+0x58>
 8002288:	425a      	negs	r2, r3
 800228a:	50e2      	str	r2, [r4, r3]
 800228c:	e7e4      	b.n	8002258 <_malloc_r+0x58>
 800228e:	684b      	ldr	r3, [r1, #4]
 8002290:	6063      	str	r3, [r4, #4]
 8002292:	000c      	movs	r4, r1
 8002294:	e7ee      	b.n	8002274 <_malloc_r+0x74>
 8002296:	000c      	movs	r4, r1
 8002298:	6849      	ldr	r1, [r1, #4]
 800229a:	e7c2      	b.n	8002222 <_malloc_r+0x22>
 800229c:	2303      	movs	r3, #3
 800229e:	1cc4      	adds	r4, r0, #3
 80022a0:	439c      	bics	r4, r3
 80022a2:	42a0      	cmp	r0, r4
 80022a4:	d0e0      	beq.n	8002268 <_malloc_r+0x68>
 80022a6:	1a21      	subs	r1, r4, r0
 80022a8:	0030      	movs	r0, r6
 80022aa:	f000 f807 	bl	80022bc <_sbrk_r>
 80022ae:	1c43      	adds	r3, r0, #1
 80022b0:	d1da      	bne.n	8002268 <_malloc_r+0x68>
 80022b2:	e7c6      	b.n	8002242 <_malloc_r+0x42>
 80022b4:	2000009c 	.word	0x2000009c
 80022b8:	200000a0 	.word	0x200000a0

080022bc <_sbrk_r>:
 80022bc:	2300      	movs	r3, #0
 80022be:	b570      	push	{r4, r5, r6, lr}
 80022c0:	4c06      	ldr	r4, [pc, #24]	; (80022dc <_sbrk_r+0x20>)
 80022c2:	0005      	movs	r5, r0
 80022c4:	0008      	movs	r0, r1
 80022c6:	6023      	str	r3, [r4, #0]
 80022c8:	f7ff fb92 	bl	80019f0 <_sbrk>
 80022cc:	1c43      	adds	r3, r0, #1
 80022ce:	d103      	bne.n	80022d8 <_sbrk_r+0x1c>
 80022d0:	6823      	ldr	r3, [r4, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d000      	beq.n	80022d8 <_sbrk_r+0x1c>
 80022d6:	602b      	str	r3, [r5, #0]
 80022d8:	bd70      	pop	{r4, r5, r6, pc}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	20000278 	.word	0x20000278

080022e0 <__sread>:
 80022e0:	b570      	push	{r4, r5, r6, lr}
 80022e2:	000c      	movs	r4, r1
 80022e4:	250e      	movs	r5, #14
 80022e6:	5f49      	ldrsh	r1, [r1, r5]
 80022e8:	f000 f8a6 	bl	8002438 <_read_r>
 80022ec:	2800      	cmp	r0, #0
 80022ee:	db03      	blt.n	80022f8 <__sread+0x18>
 80022f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80022f2:	181b      	adds	r3, r3, r0
 80022f4:	6563      	str	r3, [r4, #84]	; 0x54
 80022f6:	bd70      	pop	{r4, r5, r6, pc}
 80022f8:	89a3      	ldrh	r3, [r4, #12]
 80022fa:	4a02      	ldr	r2, [pc, #8]	; (8002304 <__sread+0x24>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	81a3      	strh	r3, [r4, #12]
 8002300:	e7f9      	b.n	80022f6 <__sread+0x16>
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	ffffefff 	.word	0xffffefff

08002308 <__swrite>:
 8002308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230a:	001f      	movs	r7, r3
 800230c:	898b      	ldrh	r3, [r1, #12]
 800230e:	0005      	movs	r5, r0
 8002310:	000c      	movs	r4, r1
 8002312:	0016      	movs	r6, r2
 8002314:	05db      	lsls	r3, r3, #23
 8002316:	d505      	bpl.n	8002324 <__swrite+0x1c>
 8002318:	230e      	movs	r3, #14
 800231a:	5ec9      	ldrsh	r1, [r1, r3]
 800231c:	2200      	movs	r2, #0
 800231e:	2302      	movs	r3, #2
 8002320:	f000 f874 	bl	800240c <_lseek_r>
 8002324:	89a3      	ldrh	r3, [r4, #12]
 8002326:	4a05      	ldr	r2, [pc, #20]	; (800233c <__swrite+0x34>)
 8002328:	0028      	movs	r0, r5
 800232a:	4013      	ands	r3, r2
 800232c:	81a3      	strh	r3, [r4, #12]
 800232e:	0032      	movs	r2, r6
 8002330:	230e      	movs	r3, #14
 8002332:	5ee1      	ldrsh	r1, [r4, r3]
 8002334:	003b      	movs	r3, r7
 8002336:	f000 f81f 	bl	8002378 <_write_r>
 800233a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800233c:	ffffefff 	.word	0xffffefff

08002340 <__sseek>:
 8002340:	b570      	push	{r4, r5, r6, lr}
 8002342:	000c      	movs	r4, r1
 8002344:	250e      	movs	r5, #14
 8002346:	5f49      	ldrsh	r1, [r1, r5]
 8002348:	f000 f860 	bl	800240c <_lseek_r>
 800234c:	89a3      	ldrh	r3, [r4, #12]
 800234e:	1c42      	adds	r2, r0, #1
 8002350:	d103      	bne.n	800235a <__sseek+0x1a>
 8002352:	4a05      	ldr	r2, [pc, #20]	; (8002368 <__sseek+0x28>)
 8002354:	4013      	ands	r3, r2
 8002356:	81a3      	strh	r3, [r4, #12]
 8002358:	bd70      	pop	{r4, r5, r6, pc}
 800235a:	2280      	movs	r2, #128	; 0x80
 800235c:	0152      	lsls	r2, r2, #5
 800235e:	4313      	orrs	r3, r2
 8002360:	81a3      	strh	r3, [r4, #12]
 8002362:	6560      	str	r0, [r4, #84]	; 0x54
 8002364:	e7f8      	b.n	8002358 <__sseek+0x18>
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	ffffefff 	.word	0xffffefff

0800236c <__sclose>:
 800236c:	b510      	push	{r4, lr}
 800236e:	230e      	movs	r3, #14
 8002370:	5ec9      	ldrsh	r1, [r1, r3]
 8002372:	f000 f815 	bl	80023a0 <_close_r>
 8002376:	bd10      	pop	{r4, pc}

08002378 <_write_r>:
 8002378:	b570      	push	{r4, r5, r6, lr}
 800237a:	0005      	movs	r5, r0
 800237c:	0008      	movs	r0, r1
 800237e:	0011      	movs	r1, r2
 8002380:	2200      	movs	r2, #0
 8002382:	4c06      	ldr	r4, [pc, #24]	; (800239c <_write_r+0x24>)
 8002384:	6022      	str	r2, [r4, #0]
 8002386:	001a      	movs	r2, r3
 8002388:	f7ff f896 	bl	80014b8 <_write>
 800238c:	1c43      	adds	r3, r0, #1
 800238e:	d103      	bne.n	8002398 <_write_r+0x20>
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d000      	beq.n	8002398 <_write_r+0x20>
 8002396:	602b      	str	r3, [r5, #0]
 8002398:	bd70      	pop	{r4, r5, r6, pc}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	20000278 	.word	0x20000278

080023a0 <_close_r>:
 80023a0:	2300      	movs	r3, #0
 80023a2:	b570      	push	{r4, r5, r6, lr}
 80023a4:	4c06      	ldr	r4, [pc, #24]	; (80023c0 <_close_r+0x20>)
 80023a6:	0005      	movs	r5, r0
 80023a8:	0008      	movs	r0, r1
 80023aa:	6023      	str	r3, [r4, #0]
 80023ac:	f7ff fb3a 	bl	8001a24 <_close>
 80023b0:	1c43      	adds	r3, r0, #1
 80023b2:	d103      	bne.n	80023bc <_close_r+0x1c>
 80023b4:	6823      	ldr	r3, [r4, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d000      	beq.n	80023bc <_close_r+0x1c>
 80023ba:	602b      	str	r3, [r5, #0]
 80023bc:	bd70      	pop	{r4, r5, r6, pc}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	20000278 	.word	0x20000278

080023c4 <_fstat_r>:
 80023c4:	2300      	movs	r3, #0
 80023c6:	b570      	push	{r4, r5, r6, lr}
 80023c8:	4c06      	ldr	r4, [pc, #24]	; (80023e4 <_fstat_r+0x20>)
 80023ca:	0005      	movs	r5, r0
 80023cc:	0008      	movs	r0, r1
 80023ce:	0011      	movs	r1, r2
 80023d0:	6023      	str	r3, [r4, #0]
 80023d2:	f7ff fb2a 	bl	8001a2a <_fstat>
 80023d6:	1c43      	adds	r3, r0, #1
 80023d8:	d103      	bne.n	80023e2 <_fstat_r+0x1e>
 80023da:	6823      	ldr	r3, [r4, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d000      	beq.n	80023e2 <_fstat_r+0x1e>
 80023e0:	602b      	str	r3, [r5, #0]
 80023e2:	bd70      	pop	{r4, r5, r6, pc}
 80023e4:	20000278 	.word	0x20000278

080023e8 <_isatty_r>:
 80023e8:	2300      	movs	r3, #0
 80023ea:	b570      	push	{r4, r5, r6, lr}
 80023ec:	4c06      	ldr	r4, [pc, #24]	; (8002408 <_isatty_r+0x20>)
 80023ee:	0005      	movs	r5, r0
 80023f0:	0008      	movs	r0, r1
 80023f2:	6023      	str	r3, [r4, #0]
 80023f4:	f7ff fb1e 	bl	8001a34 <_isatty>
 80023f8:	1c43      	adds	r3, r0, #1
 80023fa:	d103      	bne.n	8002404 <_isatty_r+0x1c>
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d000      	beq.n	8002404 <_isatty_r+0x1c>
 8002402:	602b      	str	r3, [r5, #0]
 8002404:	bd70      	pop	{r4, r5, r6, pc}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	20000278 	.word	0x20000278

0800240c <_lseek_r>:
 800240c:	b570      	push	{r4, r5, r6, lr}
 800240e:	0005      	movs	r5, r0
 8002410:	0008      	movs	r0, r1
 8002412:	0011      	movs	r1, r2
 8002414:	2200      	movs	r2, #0
 8002416:	4c06      	ldr	r4, [pc, #24]	; (8002430 <_lseek_r+0x24>)
 8002418:	6022      	str	r2, [r4, #0]
 800241a:	001a      	movs	r2, r3
 800241c:	f7ff fb0c 	bl	8001a38 <_lseek>
 8002420:	1c43      	adds	r3, r0, #1
 8002422:	d103      	bne.n	800242c <_lseek_r+0x20>
 8002424:	6823      	ldr	r3, [r4, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d000      	beq.n	800242c <_lseek_r+0x20>
 800242a:	602b      	str	r3, [r5, #0]
 800242c:	bd70      	pop	{r4, r5, r6, pc}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	20000278 	.word	0x20000278

08002434 <__malloc_lock>:
 8002434:	4770      	bx	lr

08002436 <__malloc_unlock>:
 8002436:	4770      	bx	lr

08002438 <_read_r>:
 8002438:	b570      	push	{r4, r5, r6, lr}
 800243a:	0005      	movs	r5, r0
 800243c:	0008      	movs	r0, r1
 800243e:	0011      	movs	r1, r2
 8002440:	2200      	movs	r2, #0
 8002442:	4c06      	ldr	r4, [pc, #24]	; (800245c <_read_r+0x24>)
 8002444:	6022      	str	r2, [r4, #0]
 8002446:	001a      	movs	r2, r3
 8002448:	f7ff fac4 	bl	80019d4 <_read>
 800244c:	1c43      	adds	r3, r0, #1
 800244e:	d103      	bne.n	8002458 <_read_r+0x20>
 8002450:	6823      	ldr	r3, [r4, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d000      	beq.n	8002458 <_read_r+0x20>
 8002456:	602b      	str	r3, [r5, #0]
 8002458:	bd70      	pop	{r4, r5, r6, pc}
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	20000278 	.word	0x20000278

08002460 <_init>:
 8002460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002466:	bc08      	pop	{r3}
 8002468:	469e      	mov	lr, r3
 800246a:	4770      	bx	lr

0800246c <_fini>:
 800246c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002472:	bc08      	pop	{r3}
 8002474:	469e      	mov	lr, r3
 8002476:	4770      	bx	lr
